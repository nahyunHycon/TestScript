// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version 11.0.0
// for hyconsoft_rnd (hyconsoft_rnd@hyconsoft) on Wed Dec 11 13:55:00 2024

// Copyright (c) 2000-2024 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "PipeTest.hh"

namespace PipeTest {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static boolean init_system_port(const char* component_type, const char* port_name);
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const unsigned char os_0_octets[] = { 171, 205 };
static const OCTETSTRING os_1(0, NULL),
os_0(2, os_0_octets);
static const CHARSTRING cs_10(0, NULL),
cs_14(24, "/bin/ls -l PipeTest.ttcn"),
cs_31(81, "/home/hyconsoft_rnd/Desktop/TestScript/01_SW_Config/1.1_config_file_pass.sh; exit"),
cs_34(76, "/home/hyconsoft_rnd/Desktop/TestScript/01_SW_Config/1.2_filemv_pass.sh; exit"),
cs_35(76, "/home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/2.1_ros2_ID.sh; exit"),
cs_43(79, "/home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/2.2_ros2_sros2.sh; exit"),
cs_42(82, "/home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_shutdown.sh; exit"),
cs_44(76, "/home/hyconsoft_rnd/Desktop/TestScript/03_Package/3.1_Package_check.sh; exit"),
cs_45(74, "/home/hyconsoft_rnd/Desktop/TestScript/03_Package/3.2_Package_add.sh; exit"),
cs_46(75, "/home/hyconsoft_rnd/Desktop/TestScript/03_Package/3.3_Package_copy.sh; exit"),
cs_47(76, "/home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/4.1_node_sros2.sh; exit"),
cs_55(76, "/home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/4.2_ros2_sros2.sh; exit"),
cs_54(79, "/home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_shutdown.sh; exit"),
cs_56(83, "/home/hyconsoft_rnd/Desktop/TestScript/05_individual_information/5.1_sros2.sh; exit"),
cs_57(90, "/home/hyconsoft_rnd/Desktop/TestScript/05_individual_information/5.2_sros2_config.sh; exit"),
cs_58(88, "/home/hyconsoft_rnd/Desktop/TestScript/06_Network_Security_Config/6.1_sros2_set.sh; exit"),
cs_59(91, "/home/hyconsoft_rnd/Desktop/TestScript/06_Network_Security_Config/6.2_sros2_policy.sh; exit"),
cs_67(74, "/home/hyconsoft_rnd/Desktop/TestScript/07_Injection/7.1_injection.sh; exit"),
cs_66(78, "/home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_shutdown.sh; exit"),
cs_68(88, "/home/hyconsoft_rnd/Desktop/TestScript/08_VehicleMessageVerification/8.1_filemv.sh; exit"),
cs_69(78, "/home/hyconsoft_rnd/Desktop/TestScript/09_LogVerification/9.1_LogFile.sh; exit"),
cs_70(77, "/home/hyconsoft_rnd/Desktop/TestScript/09_LogVerification/9.2_FileMV.sh; exit"),
cs_71(96, "/home/hyconsoft_rnd/Desktop/TestScript/11_Network_Firewall_Verification/11.1_sshd_check.sh; exit"),
cs_72(100, "/home/hyconsoft_rnd/Desktop/TestScript/11_Network_Firewall_Verification/11.2_firewall_check.sh; exit"),
cs_73(98, "/home/hyconsoft_rnd/Desktop/TestScript/11_Network_Firewall_Verification/11.3_config_check.sh; exit"),
cs_78(81, "/home/hyconsoft_rnd/Desktop/TestScript/12_CAN_Protocol/12.2_autoware_pen.sh; exit"),
cs_77(81, "/home/hyconsoft_rnd/Desktop/TestScript/12_CAN_Protocol/autoware_shutdown.sh; exit"),
cs_32('0'),
cs_33('1'),
cs_24(2, "No"),
cs_27(27, "Shall we repeat this again\?"),
cs_25(25, "This is the first notice!"),
cs_26(26, "This is the first question"),
cs_23(3, "Yes"),
cs_3(4, "abcd"),
cs_16(4, "barf"),
cs_20(39, "echo $ShellTestDir/ShellNotice.sh; exit"),
cs_21(47, "echo $ShellTestDir/ShellQuestionString.sh; exit"),
cs_22(46, "echo $ShellTestDir/ShellQuestionYesNo.sh; exit"),
cs_17(14, "echo 1; echo 2"),
cs_9(8, "echo XXX"),
cs_15(8, "echo foo"),
cs_18(25, "echo going...; kill -9 $$"),
cs_13(10, "echo shaap"),
cs_7(4, "exit"),
cs_29(3, "ksh"),
cs_5(2, "ls"),
cs_6(7, "ls -ltr"),
cs_8(10, "ls a*;exit"),
cs_1(8, "nedit -v"),
cs_2(9, "nedit xxx"),
cs_11(31, "nedit yyy_PLEASE_CLOSE_MANUALLY"),
cs_12(9, "nedit zzz"),
cs_0(8, "neditxxx"),
cs_30(8, "pwd;exit"),
cs_38(80, "python3 /home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_data.py"),
cs_41(86, "python3 /home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_monitoring.py"),
cs_39(79, "python3 /home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_pub.py"),
cs_37(82, "python3 /home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_rosbag.py"),
cs_40(81, "python3 /home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_sros2.py"),
cs_36(81, "python3 /home/hyconsoft_rnd/Desktop/TestScript/02_Authorization/autoware_start.py"),
cs_50(77, "python3 /home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_data.py"),
cs_53(83, "python3 /home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_monitoring.py"),
cs_51(76, "python3 /home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_pub.py"),
cs_49(79, "python3 /home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_rosbag.py"),
cs_52(78, "python3 /home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_sros2.py"),
cs_48(78, "python3 /home/hyconsoft_rnd/Desktop/TestScript/04_node_sros2/autoware_start.py"),
cs_62(76, "python3 /home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_data.py"),
cs_65(82, "python3 /home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_monitoring.py"),
cs_63(75, "python3 /home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_pub.py"),
cs_61(78, "python3 /home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_rosbag.py"),
cs_64(77, "python3 /home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_sros2.py"),
cs_60(77, "python3 /home/hyconsoft_rnd/Desktop/TestScript/07_Injection/autoware_start.py"),
cs_75(81, "python3 /home/hyconsoft_rnd/Desktop/TestScript/12_CAN_Protocol/autoware_rosbag.py"),
cs_74(80, "python3 /home/hyconsoft_rnd/Desktop/TestScript/12_CAN_Protocol/autoware_start.py"),
cs_76(85, "python3 /home/hyconsoft_rnd/Desktop/TestScript/12_CAN_Protocol/autoware_subscriber.py"),
cs_19(2, "sh"),
cs_4(4, "tcsh"),
cs_28(6, "xclock");
static const unsigned char module_checksum[] = { 0x71, 0x8f, 0x66, 0xa5, 0xf5, 0xc6, 0xb3, 0x95, 0xd5, 0xe5, 0x4d, 0x4f, 0xfe, 0xd7, 0xa3, 0x8b };

/* Class definitions for internal use */

class handle__default_Default : public Default_Base {
public:
handle__default_Default();
alt_status call_altstep();
};


/* Global variable definitions */

const TTCN_Typedescriptor_t& PIPE__CT_descr_ = COMPONENT_descr_;
PIPEasp__PortType::PIPEasp__PT PIPE__CT_component_PIPE__PCO("PIPE_PCO");
PIPEasp__PortType::PIPEasp__PT PIPE__CT_component_PIPE__PCO1("PIPE_PCO1");
PIPEasp__Types::ASP__PExecute PIPE__CT_component_v__ASP__PExecute;
PIPEasp__Types::ASP__PResult PIPE__CT_component_v__ASP__PResult;
PIPEasp__Types::ASP__PExecuteBinary PIPE__CT_component_v__ASP__PExecuteBinary;
PIPEasp__Types::ASP__PResultBinary PIPE__CT_component_v__ASP__PResultBinary;
PIPEasp__Types::ASP__PExecuteBackground PIPE__CT_component_v__ASP__PExecuteBackground;
PIPEasp__Types::ASP__PStdin PIPE__CT_component_v__ASP__PStdin;
PIPEasp__Types::ASP__PStdout PIPE__CT_component_v__ASP__PStdout;
PIPEasp__Types::ASP__PStderr PIPE__CT_component_v__ASP__PStderr;
PIPEasp__Types::ASP__PStdinBinary PIPE__CT_component_v__ASP__PStdinBinary;
PIPEasp__Types::ASP__PStdoutBinary PIPE__CT_component_v__ASP__PStdoutBinary;
PIPEasp__Types::ASP__PStderrBinary PIPE__CT_component_v__ASP__PStderrBinary;
PIPEasp__Types::ASP__PKill PIPE__CT_component_v__ASP__PKill;
PIPEasp__Types::ASP__PExit PIPE__CT_component_v__ASP__PExit;
PIPEasp__Types::ASP__PLineMode PIPE__CT_component_v__ASP__PLineMode;
PIPEasp__Types::ASP__PError PIPE__CT_component_v__ASP__PError;
TTCN_Module module_object("PipeTest", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, init_system_port, start_ptc_function, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_11,
  current_runtime_version.requires_minor_version_0,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

handle__default_Default::handle__default_Default()
 : Default_Base("handle_default")
{
}

alt_status handle__default_Default::call_altstep()
{
return handle__default_instance();
}


/* Bodies of functions, altsteps and testcases */

alt_status handle__default_instance()
{
TTCN_Location current_location("PipeTest.ttcn", 45, TTCN_Location::LOCATION_ALTSTEP, "handle_default");
alt_status ret_val = ALT_NO;
current_location.update_lineno(46);
/* PipeTest.ttcn, line 46 */
switch (PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PError), any_compref, NULL, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(47);
/* PipeTest.ttcn, line 47 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Error msg received: ");
PIPE__CT_component_v__ASP__PError.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(48);
/* PipeTest.ttcn, line 48 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(50);
/* PipeTest.ttcn, line 50 */
switch (PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PExit(INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PExit), any_compref, NULL, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(51);
/* PipeTest.ttcn, line 51 */
if ((const_cast< const PIPEasp__Types::ASP__PExit&>(PIPE__CT_component_v__ASP__PExit).code() != 0)) {
current_location.update_lineno(52);
/* PipeTest.ttcn, line 52 */
TTCN_Runtime::setverdict(FAIL);
}
current_location.update_lineno(54);
/* PipeTest.ttcn, line 54 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(56);
/* PipeTest.ttcn, line 56 */
switch (PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PStdout(CHARSTRING_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PStdout), any_compref, NULL, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(57);
/* PipeTest.ttcn, line 57 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Stdout msg received: ");
PIPE__CT_component_v__ASP__PStdout.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(58);
/* PipeTest.ttcn, line 58 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(60);
/* PipeTest.ttcn, line 60 */
switch (PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PStderr(CHARSTRING_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PStderr), any_compref, NULL, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(61);
/* PipeTest.ttcn, line 61 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Stderr msg received: ");
PIPE__CT_component_v__ASP__PStderr.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(62);
/* PipeTest.ttcn, line 62 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(64);
/* PipeTest.ttcn, line 64 */
switch (PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(65);
/* PipeTest.ttcn, line 65 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("PResult msg received: ");
PIPE__CT_component_v__ASP__PResult.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(66);
/* PipeTest.ttcn, line 66 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(68);
/* PipeTest.ttcn, line 68 */
switch (PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResultBinary(OCTETSTRING_template(ANY_VALUE), OCTETSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResultBinary), any_compref, NULL, NULL, NULL)) {
case ALT_YES:
{
current_location.update_lineno(69);
/* PipeTest.ttcn, line 69 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("PResultBinary msg received: ");
PIPE__CT_component_v__ASP__PResultBinary.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(70);
/* PipeTest.ttcn, line 70 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void handle__default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = handle__default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep handle_default.");
else block_flag = TRUE;
}
}

Default_Base *activate_handle__default()
{
return new handle__default_Default();
}

verdicttype testcase_TC__basic(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 74, TTCN_Location::LOCATION_TESTCASE, "TC_basic");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_basic", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(75);
/* PipeTest.ttcn, line 75 */
{
Map_Params tmp_0(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_0);
}
current_location.update_lineno(77);
/* PipeTest.ttcn, line 77 */
DEFAULT default__as(activate_handle__default());
current_location.update_lineno(78);
/* PipeTest.ttcn, line 78 */
TIMER t__guard("t_guard");
current_location.update_lineno(80);
/* PipeTest.ttcn, line 80 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(-10)), NULL);
current_location.update_lineno(81);
/* PipeTest.ttcn, line 81 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PLineMode(BOOLEAN_template(FALSE)), NULL);
current_location.update_lineno(82);
/* PipeTest.ttcn, line 82 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PLineMode(BOOLEAN_template(TRUE)), NULL);
current_location.update_lineno(85);
/* PipeTest.ttcn, line 85 */
t__guard.start(5.0);
current_location.update_lineno(86);
/* PipeTest.ttcn, line 86 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(87);
/* PipeTest.ttcn, line 87 */
tmp_1_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(88);
/* PipeTest.ttcn, line 88 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_1_default_flag == ALT_MAYBE) {
tmp_1_default_flag = TTCN_Default::try_altsteps();
if (tmp_1_default_flag == ALT_YES || tmp_1_default_flag == ALT_BREAK) break;
else if (tmp_1_default_flag == ALT_REPEAT) goto tmp_1;
}
current_location.update_lineno(86);
/* PipeTest.ttcn, line 86 */
if (tmp_1_alt_flag_0 == ALT_NO && tmp_1_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 86 and 90.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(112);
/* PipeTest.ttcn, line 112 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBackground(CHARSTRING_template(cs_0)), NULL);
current_location.update_lineno(113);
/* PipeTest.ttcn, line 113 */
t__guard.start(5.0);
current_location.update_lineno(114);
/* PipeTest.ttcn, line 114 */
{
tmp_2:
alt_status tmp_2_alt_flag_0 = ALT_MAYBE;
alt_status tmp_2_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_2_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(115);
/* PipeTest.ttcn, line 115 */
tmp_2_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_2_alt_flag_0 == ALT_YES) {
current_location.update_lineno(116);
/* PipeTest.ttcn, line 116 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_2_default_flag == ALT_MAYBE) {
tmp_2_default_flag = TTCN_Default::try_altsteps();
if (tmp_2_default_flag == ALT_YES || tmp_2_default_flag == ALT_BREAK) break;
else if (tmp_2_default_flag == ALT_REPEAT) goto tmp_2;
}
current_location.update_lineno(114);
/* PipeTest.ttcn, line 114 */
if (tmp_2_alt_flag_0 == ALT_NO && tmp_2_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 114 and 118.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(120);
/* PipeTest.ttcn, line 120 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBackground(CHARSTRING_template(cs_1)), NULL);
current_location.update_lineno(121);
/* PipeTest.ttcn, line 121 */
t__guard.start(5.0);
current_location.update_lineno(122);
/* PipeTest.ttcn, line 122 */
{
tmp_3:
alt_status tmp_3_alt_flag_0 = ALT_MAYBE;
alt_status tmp_3_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_3_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(123);
/* PipeTest.ttcn, line 123 */
tmp_3_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_3_alt_flag_0 == ALT_YES) {
current_location.update_lineno(124);
/* PipeTest.ttcn, line 124 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_3_default_flag == ALT_MAYBE) {
tmp_3_default_flag = TTCN_Default::try_altsteps();
if (tmp_3_default_flag == ALT_YES || tmp_3_default_flag == ALT_BREAK) break;
else if (tmp_3_default_flag == ALT_REPEAT) goto tmp_3;
}
current_location.update_lineno(122);
/* PipeTest.ttcn, line 122 */
if (tmp_3_alt_flag_0 == ALT_NO && tmp_3_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 122 and 126.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(129);
/* PipeTest.ttcn, line 129 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBackground(CHARSTRING_template(cs_2)), NULL);
current_location.update_lineno(130);
/* PipeTest.ttcn, line 130 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdinBinary(OCTETSTRING_template(os_0)), NULL);
current_location.update_lineno(131);
/* PipeTest.ttcn, line 131 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_3)), NULL);
current_location.update_lineno(133);
/* PipeTest.ttcn, line 133 */
t__guard.start(5.0);
current_location.update_lineno(134);
/* PipeTest.ttcn, line 134 */
{
tmp_4:
alt_status tmp_4_alt_flag_0 = ALT_MAYBE;
alt_status tmp_4_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_4_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(135);
/* PipeTest.ttcn, line 135 */
tmp_4_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_4_alt_flag_0 == ALT_YES) {
current_location.update_lineno(136);
/* PipeTest.ttcn, line 136 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_4_default_flag == ALT_MAYBE) {
tmp_4_default_flag = TTCN_Default::try_altsteps();
if (tmp_4_default_flag == ALT_YES || tmp_4_default_flag == ALT_BREAK) break;
else if (tmp_4_default_flag == ALT_REPEAT) goto tmp_4;
}
current_location.update_lineno(134);
/* PipeTest.ttcn, line 134 */
if (tmp_4_alt_flag_0 == ALT_NO && tmp_4_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 134 and 138.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(141);
/* PipeTest.ttcn, line 141 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(144);
/* PipeTest.ttcn, line 144 */
t__guard.start(5.0);
current_location.update_lineno(145);
/* PipeTest.ttcn, line 145 */
{
tmp_5:
alt_status tmp_5_alt_flag_0 = ALT_MAYBE;
alt_status tmp_5_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_5_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(146);
/* PipeTest.ttcn, line 146 */
tmp_5_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_5_alt_flag_0 == ALT_YES) {
current_location.update_lineno(147);
/* PipeTest.ttcn, line 147 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_5_default_flag == ALT_MAYBE) {
tmp_5_default_flag = TTCN_Default::try_altsteps();
if (tmp_5_default_flag == ALT_YES || tmp_5_default_flag == ALT_BREAK) break;
else if (tmp_5_default_flag == ALT_REPEAT) goto tmp_5;
}
current_location.update_lineno(145);
/* PipeTest.ttcn, line 145 */
if (tmp_5_alt_flag_0 == ALT_NO && tmp_5_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 145 and 149.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(152);
/* PipeTest.ttcn, line 152 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBackground(CHARSTRING_template(cs_4)), NULL);
current_location.update_lineno(153);
/* PipeTest.ttcn, line 153 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_5)), NULL);
current_location.update_lineno(154);
/* PipeTest.ttcn, line 154 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdinBinary(OCTETSTRING_template(os_0)), NULL);
current_location.update_lineno(155);
/* PipeTest.ttcn, line 155 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_3)), NULL);
current_location.update_lineno(157);
/* PipeTest.ttcn, line 157 */
t__guard.start(5.0);
current_location.update_lineno(158);
/* PipeTest.ttcn, line 158 */
{
tmp_6:
alt_status tmp_6_alt_flag_0 = ALT_MAYBE;
alt_status tmp_6_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_6_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(159);
/* PipeTest.ttcn, line 159 */
tmp_6_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_6_alt_flag_0 == ALT_YES) {
current_location.update_lineno(160);
/* PipeTest.ttcn, line 160 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_6_default_flag == ALT_MAYBE) {
tmp_6_default_flag = TTCN_Default::try_altsteps();
if (tmp_6_default_flag == ALT_YES || tmp_6_default_flag == ALT_BREAK) break;
else if (tmp_6_default_flag == ALT_REPEAT) goto tmp_6;
}
current_location.update_lineno(158);
/* PipeTest.ttcn, line 158 */
if (tmp_6_alt_flag_0 == ALT_NO && tmp_6_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 158 and 162.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(165);
/* PipeTest.ttcn, line 165 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_6)), NULL);
current_location.update_lineno(166);
/* PipeTest.ttcn, line 166 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(168);
/* PipeTest.ttcn, line 168 */
t__guard.start(5.0);
current_location.update_lineno(169);
/* PipeTest.ttcn, line 169 */
{
tmp_7:
alt_status tmp_7_alt_flag_0 = ALT_MAYBE;
alt_status tmp_7_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_7_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(170);
/* PipeTest.ttcn, line 170 */
tmp_7_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_7_alt_flag_0 == ALT_YES) {
current_location.update_lineno(171);
/* PipeTest.ttcn, line 171 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_7_default_flag == ALT_MAYBE) {
tmp_7_default_flag = TTCN_Default::try_altsteps();
if (tmp_7_default_flag == ALT_YES || tmp_7_default_flag == ALT_BREAK) break;
else if (tmp_7_default_flag == ALT_REPEAT) goto tmp_7;
}
current_location.update_lineno(169);
/* PipeTest.ttcn, line 169 */
if (tmp_7_alt_flag_0 == ALT_NO && tmp_7_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 169 and 173.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(176);
/* PipeTest.ttcn, line 176 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_4), CHARSTRING_template(cs_8)), NULL);
current_location.update_lineno(178);
/* PipeTest.ttcn, line 178 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_9), CHARSTRING_template(cs_10)), NULL);
current_location.update_lineno(179);
/* PipeTest.ttcn, line 179 */
t__guard.start(5.0);
current_location.update_lineno(180);
/* PipeTest.ttcn, line 180 */
{
tmp_8:
alt_status tmp_8_alt_flag_0 = ALT_MAYBE;
alt_status tmp_8_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_8_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(181);
/* PipeTest.ttcn, line 181 */
tmp_8_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_8_alt_flag_0 == ALT_YES) {
current_location.update_lineno(182);
/* PipeTest.ttcn, line 182 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_8_default_flag == ALT_MAYBE) {
tmp_8_default_flag = TTCN_Default::try_altsteps();
if (tmp_8_default_flag == ALT_YES || tmp_8_default_flag == ALT_BREAK) break;
else if (tmp_8_default_flag == ALT_REPEAT) goto tmp_8;
}
current_location.update_lineno(180);
/* PipeTest.ttcn, line 180 */
if (tmp_8_alt_flag_0 == ALT_NO && tmp_8_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 180 and 184.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(188);
/* PipeTest.ttcn, line 188 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_11), CHARSTRING_template(cs_3)), NULL);
current_location.update_lineno(189);
/* PipeTest.ttcn, line 189 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_6)), NULL);
current_location.update_lineno(192);
/* PipeTest.ttcn, line 192 */
t__guard.start(5.0);
current_location.update_lineno(193);
/* PipeTest.ttcn, line 193 */
{
tmp_9:
alt_status tmp_9_alt_flag_0 = ALT_MAYBE;
alt_status tmp_9_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_9_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(194);
/* PipeTest.ttcn, line 194 */
tmp_9_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_9_alt_flag_0 == ALT_YES) {
current_location.update_lineno(195);
/* PipeTest.ttcn, line 195 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_9_default_flag == ALT_MAYBE) {
tmp_9_default_flag = TTCN_Default::try_altsteps();
if (tmp_9_default_flag == ALT_YES || tmp_9_default_flag == ALT_BREAK) break;
else if (tmp_9_default_flag == ALT_REPEAT) goto tmp_9;
}
current_location.update_lineno(193);
/* PipeTest.ttcn, line 193 */
if (tmp_9_alt_flag_0 == ALT_NO && tmp_9_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 193 and 197.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(200);
/* PipeTest.ttcn, line 200 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBinary(CHARSTRING_template(cs_12), OCTETSTRING_template(os_0)), NULL);
current_location.update_lineno(202);
/* PipeTest.ttcn, line 202 */
t__guard.start(5.0);
current_location.update_lineno(203);
/* PipeTest.ttcn, line 203 */
{
tmp_10:
alt_status tmp_10_alt_flag_0 = ALT_MAYBE;
alt_status tmp_10_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_10_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(204);
/* PipeTest.ttcn, line 204 */
tmp_10_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_10_alt_flag_0 == ALT_YES) {
current_location.update_lineno(205);
/* PipeTest.ttcn, line 205 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_10_default_flag == ALT_MAYBE) {
tmp_10_default_flag = TTCN_Default::try_altsteps();
if (tmp_10_default_flag == ALT_YES || tmp_10_default_flag == ALT_BREAK) break;
else if (tmp_10_default_flag == ALT_REPEAT) goto tmp_10;
}
current_location.update_lineno(203);
/* PipeTest.ttcn, line 203 */
if (tmp_10_alt_flag_0 == ALT_NO && tmp_10_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 203 and 207.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(209);
/* PipeTest.ttcn, line 209 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(212);
/* PipeTest.ttcn, line 212 */
t__guard.start(1.0e1);
current_location.update_lineno(213);
/* PipeTest.ttcn, line 213 */
{
tmp_11:
alt_status tmp_11_alt_flag_0 = ALT_MAYBE;
alt_status tmp_11_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_11_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(214);
/* PipeTest.ttcn, line 214 */
tmp_11_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_11_alt_flag_0 == ALT_YES) {
current_location.update_lineno(215);
/* PipeTest.ttcn, line 215 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, exiting...");
break;
}
}
if (tmp_11_default_flag == ALT_MAYBE) {
tmp_11_default_flag = TTCN_Default::try_altsteps();
if (tmp_11_default_flag == ALT_YES || tmp_11_default_flag == ALT_BREAK) break;
else if (tmp_11_default_flag == ALT_REPEAT) goto tmp_11;
}
current_location.update_lineno(213);
/* PipeTest.ttcn, line 213 */
if (tmp_11_alt_flag_0 == ALT_NO && tmp_11_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 213 and 217.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(218);
/* PipeTest.ttcn, line 218 */
TTCN_Runtime::setverdict(PASS);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_basic was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__executeSomeUnixCommands(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 221, TTCN_Location::LOCATION_TESTCASE, "TC_executeSomeUnixCommands");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_executeSomeUnixCommands", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(222);
/* PipeTest.ttcn, line 222 */
{
Map_Params tmp_12(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_12);
}
current_location.update_lineno(224);
/* PipeTest.ttcn, line 224 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PLineMode(BOOLEAN_template(FALSE)), NULL);
current_location.update_lineno(225);
/* PipeTest.ttcn, line 225 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_13), CHARSTRING_template(cs_10)), NULL);
current_location.update_lineno(226);
/* PipeTest.ttcn, line 226 */
{
tmp_13:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_13;
}
current_location.update_lineno(226);
/* PipeTest.ttcn, line 226 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 226.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(227);
/* PipeTest.ttcn, line 227 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PLineMode(BOOLEAN_template(TRUE)), NULL);
current_location.update_lineno(229);
/* PipeTest.ttcn, line 229 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_14), CHARSTRING_template(cs_10)), NULL);
current_location.update_lineno(230);
/* PipeTest.ttcn, line 230 */
{
tmp_14:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_14;
}
current_location.update_lineno(230);
/* PipeTest.ttcn, line 230 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 230.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(232);
/* PipeTest.ttcn, line 232 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBinary(CHARSTRING_template(cs_15), OCTETSTRING_template(os_1)), NULL);
current_location.update_lineno(233);
/* PipeTest.ttcn, line 233 */
{
tmp_15:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResultBinary(OCTETSTRING_template(ANY_VALUE), OCTETSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_15;
}
current_location.update_lineno(233);
/* PipeTest.ttcn, line 233 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 233.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(234);
/* PipeTest.ttcn, line 234 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(235);
/* PipeTest.ttcn, line 235 */
{
tmp_16:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_16;
}
current_location.update_lineno(235);
/* PipeTest.ttcn, line 235 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 235.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(237);
/* PipeTest.ttcn, line 237 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecuteBackground(CHARSTRING_template(cs_4)), NULL);
current_location.update_lineno(238);
/* PipeTest.ttcn, line 238 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_16)), NULL);
current_location.update_lineno(239);
/* PipeTest.ttcn, line 239 */
{
tmp_17:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PStderr(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_17;
}
current_location.update_lineno(239);
/* PipeTest.ttcn, line 239 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 239.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(240);
/* PipeTest.ttcn, line 240 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_17)), NULL);
current_location.update_lineno(241);
/* PipeTest.ttcn, line 241 */
{
tmp_18:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PStdout(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_18;
}
current_location.update_lineno(241);
/* PipeTest.ttcn, line 241 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 241.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(242);
/* PipeTest.ttcn, line 242 */
{
tmp_19:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PStdout(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_19;
}
current_location.update_lineno(242);
/* PipeTest.ttcn, line 242 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 242.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(243);
/* PipeTest.ttcn, line 243 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PStdin(CHARSTRING_template(cs_18)), NULL);
current_location.update_lineno(244);
/* PipeTest.ttcn, line 244 */
{
tmp_20:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PStdout(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_20;
}
current_location.update_lineno(244);
/* PipeTest.ttcn, line 244 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 244.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(245);
/* PipeTest.ttcn, line 245 */
{
tmp_21:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PExit(INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_21;
}
current_location.update_lineno(245);
/* PipeTest.ttcn, line 245 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 245.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(247);
/* PipeTest.ttcn, line 247 */
TTCN_Runtime::setverdict(PASS);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_executeSomeUnixCommands was stopped.");
}
return TTCN_Runtime::end_testcase();
}

void WindowNotice(const CHARSTRING& pl__notice)
{
TTCN_Location current_location("PipeTest.ttcn", 250, TTCN_Location::LOCATION_FUNCTION, "WindowNotice");
current_location.update_lineno(252);
/* PipeTest.ttcn, line 252 */
CHARSTRING v__WindowCommand(cs_10);
current_location.update_lineno(253);
/* PipeTest.ttcn, line 253 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_20)), NULL);
current_location.update_lineno(254);
/* PipeTest.ttcn, line 254 */
{
tmp_22:
alt_status tmp_22_alt_flag_0 = ALT_MAYBE;
alt_status tmp_22_alt_flag_1 = ALT_MAYBE;
alt_status tmp_22_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_22_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(255);
/* PipeTest.ttcn, line 255 */
tmp_22_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_22_alt_flag_0 == ALT_YES) {
current_location.update_lineno(256);
/* PipeTest.ttcn, line 256 */
v__WindowCommand = const_cast< const PIPEasp__Types::ASP__PResult&>(PIPE__CT_component_v__ASP__PResult).stdout_();
current_location.update_lineno(258);
/* PipeTest.ttcn, line 258 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(v__WindowCommand), CHARSTRING_template(pl__notice)), NULL);
current_location.update_lineno(259);
/* PipeTest.ttcn, line 259 */
{
tmp_24:
alt_status tmp_24_alt_flag_0 = ALT_MAYBE;
alt_status tmp_24_alt_flag_1 = ALT_MAYBE;
alt_status tmp_24_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_24_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(260);
/* PipeTest.ttcn, line 260 */
tmp_24_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_10), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_24_alt_flag_0 == ALT_YES) break;
}
if (tmp_24_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(262);
/* PipeTest.ttcn, line 262 */
tmp_24_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_24_alt_flag_1 == ALT_YES) {
current_location.update_lineno(263);
/* PipeTest.ttcn, line 263 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_24_default_flag == ALT_MAYBE) {
tmp_24_default_flag = TTCN_Default::try_altsteps();
if (tmp_24_default_flag == ALT_YES || tmp_24_default_flag == ALT_BREAK) break;
else if (tmp_24_default_flag == ALT_REPEAT) goto tmp_24;
}
current_location.update_lineno(259);
/* PipeTest.ttcn, line 259 */
if (tmp_24_alt_flag_0 == ALT_NO && tmp_24_alt_flag_1 == ALT_NO && tmp_24_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 259 and 265.");
TTCN_Snapshot::take_new(TRUE);
}
}
break;
}
}
if (tmp_22_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(267);
/* PipeTest.ttcn, line 267 */
tmp_22_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_22_alt_flag_1 == ALT_YES) {
current_location.update_lineno(268);
/* PipeTest.ttcn, line 268 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_22_default_flag == ALT_MAYBE) {
tmp_22_default_flag = TTCN_Default::try_altsteps();
if (tmp_22_default_flag == ALT_YES || tmp_22_default_flag == ALT_BREAK) break;
else if (tmp_22_default_flag == ALT_REPEAT) goto tmp_22;
}
current_location.update_lineno(254);
/* PipeTest.ttcn, line 254 */
if (tmp_22_alt_flag_0 == ALT_NO && tmp_22_alt_flag_1 == ALT_NO && tmp_22_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 254 and 270.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_WindowNotice(const COMPONENT& component_reference, const CHARSTRING& pl__notice)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function WindowNotice(");
pl__notice.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "PipeTest", "WindowNotice", text_buf);
pl__notice.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void WindowQuestionString(const CHARSTRING& pl__question, CHARSTRING& pl__answer)
{
TTCN_Location current_location("PipeTest.ttcn", 273, TTCN_Location::LOCATION_FUNCTION, "WindowQuestionString");
current_location.update_lineno(277);
/* PipeTest.ttcn, line 277 */
CHARSTRING v__WindowCommand(cs_10);
current_location.update_lineno(278);
/* PipeTest.ttcn, line 278 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_21)), NULL);
current_location.update_lineno(279);
/* PipeTest.ttcn, line 279 */
{
tmp_25:
alt_status tmp_25_alt_flag_0 = ALT_MAYBE;
alt_status tmp_25_alt_flag_1 = ALT_MAYBE;
alt_status tmp_25_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_25_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(280);
/* PipeTest.ttcn, line 280 */
tmp_25_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_25_alt_flag_0 == ALT_YES) {
current_location.update_lineno(281);
/* PipeTest.ttcn, line 281 */
v__WindowCommand = const_cast< const PIPEasp__Types::ASP__PResult&>(PIPE__CT_component_v__ASP__PResult).stdout_();
current_location.update_lineno(283);
/* PipeTest.ttcn, line 283 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(v__WindowCommand), CHARSTRING_template(pl__question)), NULL);
current_location.update_lineno(284);
/* PipeTest.ttcn, line 284 */
{
tmp_27:
alt_status tmp_27_alt_flag_0 = ALT_MAYBE;
alt_status tmp_27_alt_flag_1 = ALT_MAYBE;
alt_status tmp_27_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_27_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(285);
/* PipeTest.ttcn, line 285 */
tmp_27_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_27_alt_flag_0 == ALT_YES) {
current_location.update_lineno(286);
/* PipeTest.ttcn, line 286 */
pl__answer = const_cast< const PIPEasp__Types::ASP__PResult&>(PIPE__CT_component_v__ASP__PResult).stdout_();
break;
}
}
if (tmp_27_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(288);
/* PipeTest.ttcn, line 288 */
tmp_27_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_27_alt_flag_1 == ALT_YES) {
current_location.update_lineno(289);
/* PipeTest.ttcn, line 289 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_27_default_flag == ALT_MAYBE) {
tmp_27_default_flag = TTCN_Default::try_altsteps();
if (tmp_27_default_flag == ALT_YES || tmp_27_default_flag == ALT_BREAK) break;
else if (tmp_27_default_flag == ALT_REPEAT) goto tmp_27;
}
current_location.update_lineno(284);
/* PipeTest.ttcn, line 284 */
if (tmp_27_alt_flag_0 == ALT_NO && tmp_27_alt_flag_1 == ALT_NO && tmp_27_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 284 and 291.");
TTCN_Snapshot::take_new(TRUE);
}
}
break;
}
}
if (tmp_25_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(293);
/* PipeTest.ttcn, line 293 */
tmp_25_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_25_alt_flag_1 == ALT_YES) {
current_location.update_lineno(294);
/* PipeTest.ttcn, line 294 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_25_default_flag == ALT_MAYBE) {
tmp_25_default_flag = TTCN_Default::try_altsteps();
if (tmp_25_default_flag == ALT_YES || tmp_25_default_flag == ALT_BREAK) break;
else if (tmp_25_default_flag == ALT_REPEAT) goto tmp_25;
}
current_location.update_lineno(279);
/* PipeTest.ttcn, line 279 */
if (tmp_25_alt_flag_0 == ALT_NO && tmp_25_alt_flag_1 == ALT_NO && tmp_25_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 279 and 296.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_WindowQuestionString(const COMPONENT& component_reference, const CHARSTRING& pl__question, CHARSTRING& pl__answer)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function WindowQuestionString(");
pl__question.log();
TTCN_Logger::log_event_str(", ");
pl__answer.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "PipeTest", "WindowQuestionString", text_buf);
pl__question.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void WindowQuestionYesNo(const CHARSTRING& pl__question, BOOLEAN& pl__answer)
{
TTCN_Location current_location("PipeTest.ttcn", 299, TTCN_Location::LOCATION_FUNCTION, "WindowQuestionYesNo");
current_location.update_lineno(303);
/* PipeTest.ttcn, line 303 */
CHARSTRING v__WindowCommand(cs_10);
current_location.update_lineno(304);
/* PipeTest.ttcn, line 304 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_22)), NULL);
current_location.update_lineno(305);
/* PipeTest.ttcn, line 305 */
{
tmp_29:
alt_status tmp_29_alt_flag_0 = ALT_MAYBE;
alt_status tmp_29_alt_flag_1 = ALT_MAYBE;
alt_status tmp_29_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_29_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(306);
/* PipeTest.ttcn, line 306 */
tmp_29_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_29_alt_flag_0 == ALT_YES) {
current_location.update_lineno(307);
/* PipeTest.ttcn, line 307 */
v__WindowCommand = const_cast< const PIPEasp__Types::ASP__PResult&>(PIPE__CT_component_v__ASP__PResult).stdout_();
current_location.update_lineno(309);
/* PipeTest.ttcn, line 309 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(v__WindowCommand), CHARSTRING_template(pl__question)), NULL);
current_location.update_lineno(310);
/* PipeTest.ttcn, line 310 */
{
tmp_31:
alt_status tmp_31_alt_flag_0 = ALT_MAYBE;
alt_status tmp_31_alt_flag_1 = ALT_MAYBE;
alt_status tmp_31_alt_flag_2 = ALT_MAYBE;
alt_status tmp_31_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_31_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(311);
/* PipeTest.ttcn, line 311 */
tmp_31_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_23), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_31_alt_flag_0 == ALT_YES) {
current_location.update_lineno(312);
/* PipeTest.ttcn, line 312 */
pl__answer = TRUE;
break;
}
}
if (tmp_31_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(314);
/* PipeTest.ttcn, line 314 */
tmp_31_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_24), CHARSTRING_template(ANY_VALUE), INTEGER_template(0)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_31_alt_flag_1 == ALT_YES) {
current_location.update_lineno(315);
/* PipeTest.ttcn, line 315 */
pl__answer = FALSE;
break;
}
}
if (tmp_31_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(317);
/* PipeTest.ttcn, line 317 */
tmp_31_alt_flag_2 = PIPE__CT_component_PIPE__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_31_alt_flag_2 == ALT_YES) {
current_location.update_lineno(318);
/* PipeTest.ttcn, line 318 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_31_default_flag == ALT_MAYBE) {
tmp_31_default_flag = TTCN_Default::try_altsteps();
if (tmp_31_default_flag == ALT_YES || tmp_31_default_flag == ALT_BREAK) break;
else if (tmp_31_default_flag == ALT_REPEAT) goto tmp_31;
}
current_location.update_lineno(310);
/* PipeTest.ttcn, line 310 */
if (tmp_31_alt_flag_0 == ALT_NO && tmp_31_alt_flag_1 == ALT_NO && tmp_31_alt_flag_2 == ALT_NO && tmp_31_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 310 and 320.");
TTCN_Snapshot::take_new(TRUE);
}
}
break;
}
}
if (tmp_29_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(322);
/* PipeTest.ttcn, line 322 */
tmp_29_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(any_compref, NULL, NULL, NULL);
if (tmp_29_alt_flag_1 == ALT_YES) {
current_location.update_lineno(323);
/* PipeTest.ttcn, line 323 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_29_default_flag == ALT_MAYBE) {
tmp_29_default_flag = TTCN_Default::try_altsteps();
if (tmp_29_default_flag == ALT_YES || tmp_29_default_flag == ALT_BREAK) break;
else if (tmp_29_default_flag == ALT_REPEAT) goto tmp_29;
}
current_location.update_lineno(305);
/* PipeTest.ttcn, line 305 */
if (tmp_29_alt_flag_0 == ALT_NO && tmp_29_alt_flag_1 == ALT_NO && tmp_29_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 305 and 325.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_WindowQuestionYesNo(const COMPONENT& component_reference, const CHARSTRING& pl__question, BOOLEAN& pl__answer)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function WindowQuestionYesNo(");
pl__question.log();
TTCN_Logger::log_event_str(", ");
pl__answer.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "PipeTest", "WindowQuestionYesNo", text_buf);
pl__question.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

verdicttype testcase_TC__TrySomeWindows(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 328, TTCN_Location::LOCATION_TESTCASE, "TC_TrySomeWindows");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_TrySomeWindows", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(329);
/* PipeTest.ttcn, line 329 */
{
Map_Params tmp_34(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_34);
}
current_location.update_lineno(331);
/* PipeTest.ttcn, line 331 */
CHARSTRING v__answerS(cs_10);
current_location.update_lineno(332);
/* PipeTest.ttcn, line 332 */
BOOLEAN v__answerB(FALSE);
current_location.update_lineno(333);
/* PipeTest.ttcn, line 333 */
tmp_35: /* TTCN-3 label: L */;
current_location.update_lineno(334);
/* PipeTest.ttcn, line 334 */
WindowNotice(cs_25);
current_location.update_lineno(335);
/* PipeTest.ttcn, line 335 */
{
CHARSTRING tmp_36;
WindowQuestionString(cs_26, tmp_36);
if (tmp_36.is_bound()) v__answerS = tmp_36;
}
current_location.update_lineno(336);
/* PipeTest.ttcn, line 336 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Answer is: ");
v__answerS.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(338);
/* PipeTest.ttcn, line 338 */
{
BOOLEAN tmp_37;
WindowQuestionYesNo(cs_27, tmp_37);
if (tmp_37.is_bound()) v__answerB = tmp_37;
}
current_location.update_lineno(339);
/* PipeTest.ttcn, line 339 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Continue\? :");
v__answerB.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(340);
/* PipeTest.ttcn, line 340 */
if (v__answerB) {
current_location.update_lineno(341);
/* PipeTest.ttcn, line 341 */
goto tmp_35; /* TTCN-3 label: L */
}
current_location.update_lineno(343);
/* PipeTest.ttcn, line 343 */
TTCN_Runtime::setverdict(PASS);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_TrySomeWindows was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__simple(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 346, TTCN_Location::LOCATION_TESTCASE, "TC_simple");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_simple", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(347);
/* PipeTest.ttcn, line 347 */
{
Map_Params tmp_38(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_38);
}
current_location.update_lineno(349);
/* PipeTest.ttcn, line 349 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_14), CHARSTRING_template(cs_10)), NULL);
current_location.update_lineno(350);
/* PipeTest.ttcn, line 350 */
{
tmp_39:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_39;
}
current_location.update_lineno(350);
/* PipeTest.ttcn, line 350 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 350.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(352);
/* PipeTest.ttcn, line 352 */
{
Map_Params tmp_40(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_40);
}
current_location.update_lineno(354);
/* PipeTest.ttcn, line 354 */
TTCN_Runtime::setverdict(PASS);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_simple was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__unmap(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 357, TTCN_Location::LOCATION_TESTCASE, "TC_unmap");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_unmap", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(358);
/* PipeTest.ttcn, line 358 */
{
Map_Params tmp_41(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_41);
}
current_location.update_lineno(360);
/* PipeTest.ttcn, line 360 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_28), CHARSTRING_template(cs_10)), NULL);
current_location.update_lineno(363);
/* PipeTest.ttcn, line 363 */
{
Map_Params tmp_42(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_42);
}
current_location.update_lineno(365);
/* PipeTest.ttcn, line 365 */
{
Map_Params tmp_43(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_43);
}
current_location.update_lineno(367);
/* PipeTest.ttcn, line 367 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_29), CHARSTRING_template(cs_30)), NULL);
current_location.update_lineno(368);
/* PipeTest.ttcn, line 368 */
{
tmp_44:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_44;
}
current_location.update_lineno(368);
/* PipeTest.ttcn, line 368 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 368.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(370);
/* PipeTest.ttcn, line 370 */
{
Map_Params tmp_45(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_45);
}
current_location.update_lineno(372);
/* PipeTest.ttcn, line 372 */
TTCN_Runtime::setverdict(PASS);
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_unmap was stopped.");
}
return TTCN_Runtime::end_testcase();
}

void sleep(const FLOAT& seconds)
{
TTCN_Location current_location("PipeTest.ttcn", 375, TTCN_Location::LOCATION_FUNCTION, "sleep");
current_location.update_lineno(376);
/* PipeTest.ttcn, line 376 */
TIMER T("T", seconds);
current_location.update_lineno(377);
/* PipeTest.ttcn, line 377 */
T.start(seconds);
current_location.update_lineno(378);
/* PipeTest.ttcn, line 378 */
{
tmp_46:
alt_status tmp_46_alt_flag_0 = ALT_MAYBE;
alt_status tmp_46_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_46_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(379);
/* PipeTest.ttcn, line 379 */
tmp_46_alt_flag_0 = T.timeout(NULL);
if (tmp_46_alt_flag_0 == ALT_YES) break;
}
if (tmp_46_default_flag == ALT_MAYBE) {
tmp_46_default_flag = TTCN_Default::try_altsteps();
if (tmp_46_default_flag == ALT_YES || tmp_46_default_flag == ALT_BREAK) break;
else if (tmp_46_default_flag == ALT_REPEAT) goto tmp_46;
}
current_location.update_lineno(378);
/* PipeTest.ttcn, line 378 */
if (tmp_46_alt_flag_0 == ALT_NO && tmp_46_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 378 and 382.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

verdicttype testcase_TC__SW__Config__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 385, TTCN_Location::LOCATION_TESTCASE, "TC_SW_Config_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_SW_Config_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(388);
/* PipeTest.ttcn, line 388 */
{
Map_Params tmp_47(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_47);
}
current_location.update_lineno(389);
/* PipeTest.ttcn, line 389 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_31)), NULL);
current_location.update_lineno(391);
/* PipeTest.ttcn, line 391 */
{
tmp_48:
alt_status tmp_48_alt_flag_0 = ALT_MAYBE;
alt_status tmp_48_alt_flag_1 = ALT_MAYBE;
alt_status tmp_48_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_48_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(393);
/* PipeTest.ttcn, line 393 */
tmp_48_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_48_alt_flag_0 == ALT_YES) {
current_location.update_lineno(394);
/* PipeTest.ttcn, line 394 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_48_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(397);
/* PipeTest.ttcn, line 397 */
tmp_48_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_48_alt_flag_1 == ALT_YES) {
current_location.update_lineno(398);
/* PipeTest.ttcn, line 398 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_48_default_flag == ALT_MAYBE) {
tmp_48_default_flag = TTCN_Default::try_altsteps();
if (tmp_48_default_flag == ALT_YES || tmp_48_default_flag == ALT_BREAK) break;
else if (tmp_48_default_flag == ALT_REPEAT) goto tmp_48;
}
current_location.update_lineno(391);
/* PipeTest.ttcn, line 391 */
if (tmp_48_alt_flag_0 == ALT_NO && tmp_48_alt_flag_1 == ALT_NO && tmp_48_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 391 and 400.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(402);
/* PipeTest.ttcn, line 402 */
{
Map_Params tmp_49(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_49);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_SW_Config_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__SW__Config__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 406, TTCN_Location::LOCATION_TESTCASE, "TC_SW_Config_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_SW_Config_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(409);
/* PipeTest.ttcn, line 409 */
{
Map_Params tmp_50(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_50);
}
current_location.update_lineno(410);
/* PipeTest.ttcn, line 410 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_34)), NULL);
current_location.update_lineno(412);
/* PipeTest.ttcn, line 412 */
{
tmp_51:
alt_status tmp_51_alt_flag_0 = ALT_MAYBE;
alt_status tmp_51_alt_flag_1 = ALT_MAYBE;
alt_status tmp_51_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_51_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(414);
/* PipeTest.ttcn, line 414 */
tmp_51_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_51_alt_flag_0 == ALT_YES) {
current_location.update_lineno(415);
/* PipeTest.ttcn, line 415 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_51_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(418);
/* PipeTest.ttcn, line 418 */
tmp_51_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_51_alt_flag_1 == ALT_YES) {
current_location.update_lineno(419);
/* PipeTest.ttcn, line 419 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_51_default_flag == ALT_MAYBE) {
tmp_51_default_flag = TTCN_Default::try_altsteps();
if (tmp_51_default_flag == ALT_YES || tmp_51_default_flag == ALT_BREAK) break;
else if (tmp_51_default_flag == ALT_REPEAT) goto tmp_51;
}
current_location.update_lineno(412);
/* PipeTest.ttcn, line 412 */
if (tmp_51_alt_flag_0 == ALT_NO && tmp_51_alt_flag_1 == ALT_NO && tmp_51_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 412 and 421.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(423);
/* PipeTest.ttcn, line 423 */
{
Map_Params tmp_52(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_52);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_SW_Config_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Authorization__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 426, TTCN_Location::LOCATION_TESTCASE, "TC_Authorization_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Authorization_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(429);
/* PipeTest.ttcn, line 429 */
{
Map_Params tmp_53(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_53);
}
current_location.update_lineno(430);
/* PipeTest.ttcn, line 430 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_35)), NULL);
current_location.update_lineno(432);
/* PipeTest.ttcn, line 432 */
{
tmp_54:
alt_status tmp_54_alt_flag_0 = ALT_MAYBE;
alt_status tmp_54_alt_flag_1 = ALT_MAYBE;
alt_status tmp_54_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_54_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(434);
/* PipeTest.ttcn, line 434 */
tmp_54_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_54_alt_flag_0 == ALT_YES) {
current_location.update_lineno(435);
/* PipeTest.ttcn, line 435 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_54_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(438);
/* PipeTest.ttcn, line 438 */
tmp_54_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_54_alt_flag_1 == ALT_YES) {
current_location.update_lineno(439);
/* PipeTest.ttcn, line 439 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_54_default_flag == ALT_MAYBE) {
tmp_54_default_flag = TTCN_Default::try_altsteps();
if (tmp_54_default_flag == ALT_YES || tmp_54_default_flag == ALT_BREAK) break;
else if (tmp_54_default_flag == ALT_REPEAT) goto tmp_54;
}
current_location.update_lineno(432);
/* PipeTest.ttcn, line 432 */
if (tmp_54_alt_flag_0 == ALT_NO && tmp_54_alt_flag_1 == ALT_NO && tmp_54_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 432 and 441.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(443);
/* PipeTest.ttcn, line 443 */
{
Map_Params tmp_55(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_55);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Authorization_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Authorization__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 447, TTCN_Location::LOCATION_TESTCASE, "TC_Authorization_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Authorization_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(450);
/* PipeTest.ttcn, line 450 */
{
Map_Params tmp_56(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_56);
}
current_location.update_lineno(452);
/* PipeTest.ttcn, line 452 */
TIMER t__guard("t_guard");
current_location.update_lineno(454);
/* PipeTest.ttcn, line 454 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_36), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(455);
/* PipeTest.ttcn, line 455 */
{
tmp_57:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_57;
}
current_location.update_lineno(455);
/* PipeTest.ttcn, line 455 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 455.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(457);
/* PipeTest.ttcn, line 457 */
sleep(3.0e1);
current_location.update_lineno(459);
/* PipeTest.ttcn, line 459 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(460);
/* PipeTest.ttcn, line 460 */
t__guard.start(5.0);
current_location.update_lineno(461);
/* PipeTest.ttcn, line 461 */
{
tmp_58:
alt_status tmp_58_alt_flag_0 = ALT_MAYBE;
alt_status tmp_58_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_58_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(462);
/* PipeTest.ttcn, line 462 */
tmp_58_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_58_alt_flag_0 == ALT_YES) {
current_location.update_lineno(463);
/* PipeTest.ttcn, line 463 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_58_default_flag == ALT_MAYBE) {
tmp_58_default_flag = TTCN_Default::try_altsteps();
if (tmp_58_default_flag == ALT_YES || tmp_58_default_flag == ALT_BREAK) break;
else if (tmp_58_default_flag == ALT_REPEAT) goto tmp_58;
}
current_location.update_lineno(461);
/* PipeTest.ttcn, line 461 */
if (tmp_58_alt_flag_0 == ALT_NO && tmp_58_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 461 and 465.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(466);
/* PipeTest.ttcn, line 466 */
{
tmp_59:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_59;
}
current_location.update_lineno(466);
/* PipeTest.ttcn, line 466 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 466.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(470);
/* PipeTest.ttcn, line 470 */
t__guard.start(5.0);
current_location.update_lineno(471);
/* PipeTest.ttcn, line 471 */
{
tmp_60:
alt_status tmp_60_alt_flag_0 = ALT_MAYBE;
alt_status tmp_60_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_60_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(472);
/* PipeTest.ttcn, line 472 */
tmp_60_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_60_alt_flag_0 == ALT_YES) {
current_location.update_lineno(473);
/* PipeTest.ttcn, line 473 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_60_default_flag == ALT_MAYBE) {
tmp_60_default_flag = TTCN_Default::try_altsteps();
if (tmp_60_default_flag == ALT_YES || tmp_60_default_flag == ALT_BREAK) break;
else if (tmp_60_default_flag == ALT_REPEAT) goto tmp_60;
}
current_location.update_lineno(471);
/* PipeTest.ttcn, line 471 */
if (tmp_60_alt_flag_0 == ALT_NO && tmp_60_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 471 and 475.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(477);
/* PipeTest.ttcn, line 477 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_37), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(478);
/* PipeTest.ttcn, line 478 */
{
tmp_61:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_61;
}
current_location.update_lineno(478);
/* PipeTest.ttcn, line 478 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 478.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(484);
/* PipeTest.ttcn, line 484 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(485);
/* PipeTest.ttcn, line 485 */
t__guard.start(5.0);
current_location.update_lineno(486);
/* PipeTest.ttcn, line 486 */
{
tmp_62:
alt_status tmp_62_alt_flag_0 = ALT_MAYBE;
alt_status tmp_62_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_62_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(487);
/* PipeTest.ttcn, line 487 */
tmp_62_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_62_alt_flag_0 == ALT_YES) {
current_location.update_lineno(488);
/* PipeTest.ttcn, line 488 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_62_default_flag == ALT_MAYBE) {
tmp_62_default_flag = TTCN_Default::try_altsteps();
if (tmp_62_default_flag == ALT_YES || tmp_62_default_flag == ALT_BREAK) break;
else if (tmp_62_default_flag == ALT_REPEAT) goto tmp_62;
}
current_location.update_lineno(486);
/* PipeTest.ttcn, line 486 */
if (tmp_62_alt_flag_0 == ALT_NO && tmp_62_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 486 and 490.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(491);
/* PipeTest.ttcn, line 491 */
{
tmp_63:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_63;
}
current_location.update_lineno(491);
/* PipeTest.ttcn, line 491 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 491.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(494);
/* PipeTest.ttcn, line 494 */
t__guard.start(5.0);
current_location.update_lineno(495);
/* PipeTest.ttcn, line 495 */
{
tmp_64:
alt_status tmp_64_alt_flag_0 = ALT_MAYBE;
alt_status tmp_64_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_64_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(496);
/* PipeTest.ttcn, line 496 */
tmp_64_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_64_alt_flag_0 == ALT_YES) {
current_location.update_lineno(497);
/* PipeTest.ttcn, line 497 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_64_default_flag == ALT_MAYBE) {
tmp_64_default_flag = TTCN_Default::try_altsteps();
if (tmp_64_default_flag == ALT_YES || tmp_64_default_flag == ALT_BREAK) break;
else if (tmp_64_default_flag == ALT_REPEAT) goto tmp_64;
}
current_location.update_lineno(495);
/* PipeTest.ttcn, line 495 */
if (tmp_64_alt_flag_0 == ALT_NO && tmp_64_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 495 and 499.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(501);
/* PipeTest.ttcn, line 501 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_38), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(502);
/* PipeTest.ttcn, line 502 */
{
tmp_65:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_65;
}
current_location.update_lineno(502);
/* PipeTest.ttcn, line 502 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 502.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(504);
/* PipeTest.ttcn, line 504 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(506);
/* PipeTest.ttcn, line 506 */
t__guard.start(5.0);
current_location.update_lineno(507);
/* PipeTest.ttcn, line 507 */
{
tmp_66:
alt_status tmp_66_alt_flag_0 = ALT_MAYBE;
alt_status tmp_66_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_66_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(508);
/* PipeTest.ttcn, line 508 */
tmp_66_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_66_alt_flag_0 == ALT_YES) {
current_location.update_lineno(509);
/* PipeTest.ttcn, line 509 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_66_default_flag == ALT_MAYBE) {
tmp_66_default_flag = TTCN_Default::try_altsteps();
if (tmp_66_default_flag == ALT_YES || tmp_66_default_flag == ALT_BREAK) break;
else if (tmp_66_default_flag == ALT_REPEAT) goto tmp_66;
}
current_location.update_lineno(507);
/* PipeTest.ttcn, line 507 */
if (tmp_66_alt_flag_0 == ALT_NO && tmp_66_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 507 and 511.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(512);
/* PipeTest.ttcn, line 512 */
{
tmp_67:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_67;
}
current_location.update_lineno(512);
/* PipeTest.ttcn, line 512 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 512.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(514);
/* PipeTest.ttcn, line 514 */
t__guard.start(5.0);
current_location.update_lineno(515);
/* PipeTest.ttcn, line 515 */
{
tmp_68:
alt_status tmp_68_alt_flag_0 = ALT_MAYBE;
alt_status tmp_68_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_68_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(516);
/* PipeTest.ttcn, line 516 */
tmp_68_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_68_alt_flag_0 == ALT_YES) {
current_location.update_lineno(517);
/* PipeTest.ttcn, line 517 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_68_default_flag == ALT_MAYBE) {
tmp_68_default_flag = TTCN_Default::try_altsteps();
if (tmp_68_default_flag == ALT_YES || tmp_68_default_flag == ALT_BREAK) break;
else if (tmp_68_default_flag == ALT_REPEAT) goto tmp_68;
}
current_location.update_lineno(515);
/* PipeTest.ttcn, line 515 */
if (tmp_68_alt_flag_0 == ALT_NO && tmp_68_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 515 and 519.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(521);
/* PipeTest.ttcn, line 521 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_39), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(522);
/* PipeTest.ttcn, line 522 */
{
tmp_69:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_69;
}
current_location.update_lineno(522);
/* PipeTest.ttcn, line 522 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 522.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(524);
/* PipeTest.ttcn, line 524 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(526);
/* PipeTest.ttcn, line 526 */
t__guard.start(5.0);
current_location.update_lineno(527);
/* PipeTest.ttcn, line 527 */
{
tmp_70:
alt_status tmp_70_alt_flag_0 = ALT_MAYBE;
alt_status tmp_70_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_70_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(528);
/* PipeTest.ttcn, line 528 */
tmp_70_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_70_alt_flag_0 == ALT_YES) {
current_location.update_lineno(529);
/* PipeTest.ttcn, line 529 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_70_default_flag == ALT_MAYBE) {
tmp_70_default_flag = TTCN_Default::try_altsteps();
if (tmp_70_default_flag == ALT_YES || tmp_70_default_flag == ALT_BREAK) break;
else if (tmp_70_default_flag == ALT_REPEAT) goto tmp_70;
}
current_location.update_lineno(527);
/* PipeTest.ttcn, line 527 */
if (tmp_70_alt_flag_0 == ALT_NO && tmp_70_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 527 and 531.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(532);
/* PipeTest.ttcn, line 532 */
{
tmp_71:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_71;
}
current_location.update_lineno(532);
/* PipeTest.ttcn, line 532 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 532.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(534);
/* PipeTest.ttcn, line 534 */
t__guard.start(5.0);
current_location.update_lineno(535);
/* PipeTest.ttcn, line 535 */
{
tmp_72:
alt_status tmp_72_alt_flag_0 = ALT_MAYBE;
alt_status tmp_72_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_72_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(536);
/* PipeTest.ttcn, line 536 */
tmp_72_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_72_alt_flag_0 == ALT_YES) {
current_location.update_lineno(537);
/* PipeTest.ttcn, line 537 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_72_default_flag == ALT_MAYBE) {
tmp_72_default_flag = TTCN_Default::try_altsteps();
if (tmp_72_default_flag == ALT_YES || tmp_72_default_flag == ALT_BREAK) break;
else if (tmp_72_default_flag == ALT_REPEAT) goto tmp_72;
}
current_location.update_lineno(535);
/* PipeTest.ttcn, line 535 */
if (tmp_72_alt_flag_0 == ALT_NO && tmp_72_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 535 and 539.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(542);
/* PipeTest.ttcn, line 542 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_40), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(543);
/* PipeTest.ttcn, line 543 */
{
tmp_73:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_73;
}
current_location.update_lineno(543);
/* PipeTest.ttcn, line 543 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 543.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(545);
/* PipeTest.ttcn, line 545 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(546);
/* PipeTest.ttcn, line 546 */
t__guard.start(5.0);
current_location.update_lineno(547);
/* PipeTest.ttcn, line 547 */
{
tmp_74:
alt_status tmp_74_alt_flag_0 = ALT_MAYBE;
alt_status tmp_74_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_74_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(548);
/* PipeTest.ttcn, line 548 */
tmp_74_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_74_alt_flag_0 == ALT_YES) {
current_location.update_lineno(549);
/* PipeTest.ttcn, line 549 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_74_default_flag == ALT_MAYBE) {
tmp_74_default_flag = TTCN_Default::try_altsteps();
if (tmp_74_default_flag == ALT_YES || tmp_74_default_flag == ALT_BREAK) break;
else if (tmp_74_default_flag == ALT_REPEAT) goto tmp_74;
}
current_location.update_lineno(547);
/* PipeTest.ttcn, line 547 */
if (tmp_74_alt_flag_0 == ALT_NO && tmp_74_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 547 and 551.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(552);
/* PipeTest.ttcn, line 552 */
{
tmp_75:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_75;
}
current_location.update_lineno(552);
/* PipeTest.ttcn, line 552 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 552.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(553);
/* PipeTest.ttcn, line 553 */
t__guard.start(5.0);
current_location.update_lineno(554);
/* PipeTest.ttcn, line 554 */
{
tmp_76:
alt_status tmp_76_alt_flag_0 = ALT_MAYBE;
alt_status tmp_76_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_76_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(555);
/* PipeTest.ttcn, line 555 */
tmp_76_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_76_alt_flag_0 == ALT_YES) {
current_location.update_lineno(556);
/* PipeTest.ttcn, line 556 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_76_default_flag == ALT_MAYBE) {
tmp_76_default_flag = TTCN_Default::try_altsteps();
if (tmp_76_default_flag == ALT_YES || tmp_76_default_flag == ALT_BREAK) break;
else if (tmp_76_default_flag == ALT_REPEAT) goto tmp_76;
}
current_location.update_lineno(554);
/* PipeTest.ttcn, line 554 */
if (tmp_76_alt_flag_0 == ALT_NO && tmp_76_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 554 and 558.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(560);
/* PipeTest.ttcn, line 560 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_41), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(561);
/* PipeTest.ttcn, line 561 */
{
tmp_77:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_77;
}
current_location.update_lineno(561);
/* PipeTest.ttcn, line 561 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 561.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(563);
/* PipeTest.ttcn, line 563 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(565);
/* PipeTest.ttcn, line 565 */
t__guard.start(5.0);
current_location.update_lineno(566);
/* PipeTest.ttcn, line 566 */
{
tmp_78:
alt_status tmp_78_alt_flag_0 = ALT_MAYBE;
alt_status tmp_78_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_78_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(567);
/* PipeTest.ttcn, line 567 */
tmp_78_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_78_alt_flag_0 == ALT_YES) {
current_location.update_lineno(568);
/* PipeTest.ttcn, line 568 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_78_default_flag == ALT_MAYBE) {
tmp_78_default_flag = TTCN_Default::try_altsteps();
if (tmp_78_default_flag == ALT_YES || tmp_78_default_flag == ALT_BREAK) break;
else if (tmp_78_default_flag == ALT_REPEAT) goto tmp_78;
}
current_location.update_lineno(566);
/* PipeTest.ttcn, line 566 */
if (tmp_78_alt_flag_0 == ALT_NO && tmp_78_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 566 and 570.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(571);
/* PipeTest.ttcn, line 571 */
{
tmp_79:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_79;
}
current_location.update_lineno(571);
/* PipeTest.ttcn, line 571 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 571.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(573);
/* PipeTest.ttcn, line 573 */
t__guard.start(5.0);
current_location.update_lineno(574);
/* PipeTest.ttcn, line 574 */
{
tmp_80:
alt_status tmp_80_alt_flag_0 = ALT_MAYBE;
alt_status tmp_80_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_80_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(575);
/* PipeTest.ttcn, line 575 */
tmp_80_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_80_alt_flag_0 == ALT_YES) {
current_location.update_lineno(576);
/* PipeTest.ttcn, line 576 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_80_default_flag == ALT_MAYBE) {
tmp_80_default_flag = TTCN_Default::try_altsteps();
if (tmp_80_default_flag == ALT_YES || tmp_80_default_flag == ALT_BREAK) break;
else if (tmp_80_default_flag == ALT_REPEAT) goto tmp_80;
}
current_location.update_lineno(574);
/* PipeTest.ttcn, line 574 */
if (tmp_80_alt_flag_0 == ALT_NO && tmp_80_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 574 and 578.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(580);
/* PipeTest.ttcn, line 580 */
sleep(1.0e2);
current_location.update_lineno(582);
/* PipeTest.ttcn, line 582 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_42)), NULL);
current_location.update_lineno(583);
/* PipeTest.ttcn, line 583 */
{
tmp_81:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_81;
}
current_location.update_lineno(583);
/* PipeTest.ttcn, line 583 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 583.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(585);
/* PipeTest.ttcn, line 585 */
t__guard.start(5.0);
current_location.update_lineno(586);
/* PipeTest.ttcn, line 586 */
{
tmp_82:
alt_status tmp_82_alt_flag_0 = ALT_MAYBE;
alt_status tmp_82_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_82_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(587);
/* PipeTest.ttcn, line 587 */
tmp_82_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_82_alt_flag_0 == ALT_YES) {
current_location.update_lineno(588);
/* PipeTest.ttcn, line 588 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_82_default_flag == ALT_MAYBE) {
tmp_82_default_flag = TTCN_Default::try_altsteps();
if (tmp_82_default_flag == ALT_YES || tmp_82_default_flag == ALT_BREAK) break;
else if (tmp_82_default_flag == ALT_REPEAT) goto tmp_82;
}
current_location.update_lineno(586);
/* PipeTest.ttcn, line 586 */
if (tmp_82_alt_flag_0 == ALT_NO && tmp_82_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 586 and 590.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(592);
/* PipeTest.ttcn, line 592 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(593);
/* PipeTest.ttcn, line 593 */
t__guard.start(5.0);
current_location.update_lineno(594);
/* PipeTest.ttcn, line 594 */
{
tmp_83:
alt_status tmp_83_alt_flag_0 = ALT_MAYBE;
alt_status tmp_83_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_83_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(595);
/* PipeTest.ttcn, line 595 */
tmp_83_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_83_alt_flag_0 == ALT_YES) {
current_location.update_lineno(596);
/* PipeTest.ttcn, line 596 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_83_default_flag == ALT_MAYBE) {
tmp_83_default_flag = TTCN_Default::try_altsteps();
if (tmp_83_default_flag == ALT_YES || tmp_83_default_flag == ALT_BREAK) break;
else if (tmp_83_default_flag == ALT_REPEAT) goto tmp_83;
}
current_location.update_lineno(594);
/* PipeTest.ttcn, line 594 */
if (tmp_83_alt_flag_0 == ALT_NO && tmp_83_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 594 and 598.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(599);
/* PipeTest.ttcn, line 599 */
{
tmp_84:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_84;
}
current_location.update_lineno(599);
/* PipeTest.ttcn, line 599 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 599.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(602);
/* PipeTest.ttcn, line 602 */
t__guard.start(5.0);
current_location.update_lineno(603);
/* PipeTest.ttcn, line 603 */
{
tmp_85:
alt_status tmp_85_alt_flag_0 = ALT_MAYBE;
alt_status tmp_85_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_85_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(604);
/* PipeTest.ttcn, line 604 */
tmp_85_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_85_alt_flag_0 == ALT_YES) {
current_location.update_lineno(605);
/* PipeTest.ttcn, line 605 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_85_default_flag == ALT_MAYBE) {
tmp_85_default_flag = TTCN_Default::try_altsteps();
if (tmp_85_default_flag == ALT_YES || tmp_85_default_flag == ALT_BREAK) break;
else if (tmp_85_default_flag == ALT_REPEAT) goto tmp_85;
}
current_location.update_lineno(603);
/* PipeTest.ttcn, line 603 */
if (tmp_85_alt_flag_0 == ALT_NO && tmp_85_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 603 and 607.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(609);
/* PipeTest.ttcn, line 609 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_43)), NULL);
current_location.update_lineno(610);
/* PipeTest.ttcn, line 610 */
{
tmp_86:
alt_status tmp_86_alt_flag_0 = ALT_MAYBE;
alt_status tmp_86_alt_flag_1 = ALT_MAYBE;
alt_status tmp_86_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_86_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(612);
/* PipeTest.ttcn, line 612 */
tmp_86_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_86_alt_flag_0 == ALT_YES) {
current_location.update_lineno(613);
/* PipeTest.ttcn, line 613 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_86_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(616);
/* PipeTest.ttcn, line 616 */
tmp_86_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_86_alt_flag_1 == ALT_YES) {
current_location.update_lineno(617);
/* PipeTest.ttcn, line 617 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_86_default_flag == ALT_MAYBE) {
tmp_86_default_flag = TTCN_Default::try_altsteps();
if (tmp_86_default_flag == ALT_YES || tmp_86_default_flag == ALT_BREAK) break;
else if (tmp_86_default_flag == ALT_REPEAT) goto tmp_86;
}
current_location.update_lineno(610);
/* PipeTest.ttcn, line 610 */
if (tmp_86_alt_flag_0 == ALT_NO && tmp_86_alt_flag_1 == ALT_NO && tmp_86_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 610 and 620.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(622);
/* PipeTest.ttcn, line 622 */
{
Map_Params tmp_87(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_87);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Authorization_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Package__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 626, TTCN_Location::LOCATION_TESTCASE, "TC_Package_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Package_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(629);
/* PipeTest.ttcn, line 629 */
{
Map_Params tmp_88(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_88);
}
current_location.update_lineno(630);
/* PipeTest.ttcn, line 630 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_44)), NULL);
current_location.update_lineno(632);
/* PipeTest.ttcn, line 632 */
{
tmp_89:
alt_status tmp_89_alt_flag_0 = ALT_MAYBE;
alt_status tmp_89_alt_flag_1 = ALT_MAYBE;
alt_status tmp_89_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_89_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(634);
/* PipeTest.ttcn, line 634 */
tmp_89_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_89_alt_flag_0 == ALT_YES) {
current_location.update_lineno(635);
/* PipeTest.ttcn, line 635 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_89_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(638);
/* PipeTest.ttcn, line 638 */
tmp_89_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_89_alt_flag_1 == ALT_YES) {
current_location.update_lineno(639);
/* PipeTest.ttcn, line 639 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_89_default_flag == ALT_MAYBE) {
tmp_89_default_flag = TTCN_Default::try_altsteps();
if (tmp_89_default_flag == ALT_YES || tmp_89_default_flag == ALT_BREAK) break;
else if (tmp_89_default_flag == ALT_REPEAT) goto tmp_89;
}
current_location.update_lineno(632);
/* PipeTest.ttcn, line 632 */
if (tmp_89_alt_flag_0 == ALT_NO && tmp_89_alt_flag_1 == ALT_NO && tmp_89_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 632 and 641.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(643);
/* PipeTest.ttcn, line 643 */
{
Map_Params tmp_90(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_90);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Package_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Package__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 647, TTCN_Location::LOCATION_TESTCASE, "TC_Package_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Package_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(650);
/* PipeTest.ttcn, line 650 */
{
Map_Params tmp_91(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_91);
}
current_location.update_lineno(651);
/* PipeTest.ttcn, line 651 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_45)), NULL);
current_location.update_lineno(653);
/* PipeTest.ttcn, line 653 */
{
tmp_92:
alt_status tmp_92_alt_flag_0 = ALT_MAYBE;
alt_status tmp_92_alt_flag_1 = ALT_MAYBE;
alt_status tmp_92_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_92_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(655);
/* PipeTest.ttcn, line 655 */
tmp_92_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_92_alt_flag_0 == ALT_YES) {
current_location.update_lineno(656);
/* PipeTest.ttcn, line 656 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_92_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(659);
/* PipeTest.ttcn, line 659 */
tmp_92_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_92_alt_flag_1 == ALT_YES) {
current_location.update_lineno(660);
/* PipeTest.ttcn, line 660 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_92_default_flag == ALT_MAYBE) {
tmp_92_default_flag = TTCN_Default::try_altsteps();
if (tmp_92_default_flag == ALT_YES || tmp_92_default_flag == ALT_BREAK) break;
else if (tmp_92_default_flag == ALT_REPEAT) goto tmp_92;
}
current_location.update_lineno(653);
/* PipeTest.ttcn, line 653 */
if (tmp_92_alt_flag_0 == ALT_NO && tmp_92_alt_flag_1 == ALT_NO && tmp_92_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 653 and 662.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(664);
/* PipeTest.ttcn, line 664 */
{
Map_Params tmp_93(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_93);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Package_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Package__03(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 668, TTCN_Location::LOCATION_TESTCASE, "TC_Package_03");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Package_03", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(671);
/* PipeTest.ttcn, line 671 */
{
Map_Params tmp_94(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_94);
}
current_location.update_lineno(672);
/* PipeTest.ttcn, line 672 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_46)), NULL);
current_location.update_lineno(674);
/* PipeTest.ttcn, line 674 */
{
tmp_95:
alt_status tmp_95_alt_flag_0 = ALT_MAYBE;
alt_status tmp_95_alt_flag_1 = ALT_MAYBE;
alt_status tmp_95_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_95_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(676);
/* PipeTest.ttcn, line 676 */
tmp_95_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_95_alt_flag_0 == ALT_YES) {
current_location.update_lineno(677);
/* PipeTest.ttcn, line 677 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_95_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(680);
/* PipeTest.ttcn, line 680 */
tmp_95_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_95_alt_flag_1 == ALT_YES) {
current_location.update_lineno(681);
/* PipeTest.ttcn, line 681 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_95_default_flag == ALT_MAYBE) {
tmp_95_default_flag = TTCN_Default::try_altsteps();
if (tmp_95_default_flag == ALT_YES || tmp_95_default_flag == ALT_BREAK) break;
else if (tmp_95_default_flag == ALT_REPEAT) goto tmp_95;
}
current_location.update_lineno(674);
/* PipeTest.ttcn, line 674 */
if (tmp_95_alt_flag_0 == ALT_NO && tmp_95_alt_flag_1 == ALT_NO && tmp_95_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 674 and 683.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(685);
/* PipeTest.ttcn, line 685 */
{
Map_Params tmp_96(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_96);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Package_03 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Node__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 689, TTCN_Location::LOCATION_TESTCASE, "TC_Node_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Node_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(692);
/* PipeTest.ttcn, line 692 */
{
Map_Params tmp_97(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_97);
}
current_location.update_lineno(693);
/* PipeTest.ttcn, line 693 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_47)), NULL);
current_location.update_lineno(695);
/* PipeTest.ttcn, line 695 */
{
tmp_98:
alt_status tmp_98_alt_flag_0 = ALT_MAYBE;
alt_status tmp_98_alt_flag_1 = ALT_MAYBE;
alt_status tmp_98_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_98_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(697);
/* PipeTest.ttcn, line 697 */
tmp_98_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_98_alt_flag_0 == ALT_YES) {
current_location.update_lineno(698);
/* PipeTest.ttcn, line 698 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_98_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(701);
/* PipeTest.ttcn, line 701 */
tmp_98_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_98_alt_flag_1 == ALT_YES) {
current_location.update_lineno(702);
/* PipeTest.ttcn, line 702 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_98_default_flag == ALT_MAYBE) {
tmp_98_default_flag = TTCN_Default::try_altsteps();
if (tmp_98_default_flag == ALT_YES || tmp_98_default_flag == ALT_BREAK) break;
else if (tmp_98_default_flag == ALT_REPEAT) goto tmp_98;
}
current_location.update_lineno(695);
/* PipeTest.ttcn, line 695 */
if (tmp_98_alt_flag_0 == ALT_NO && tmp_98_alt_flag_1 == ALT_NO && tmp_98_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 695 and 704.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(706);
/* PipeTest.ttcn, line 706 */
{
Map_Params tmp_99(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_99);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Node_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Node__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 710, TTCN_Location::LOCATION_TESTCASE, "TC_Node_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Node_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(713);
/* PipeTest.ttcn, line 713 */
{
Map_Params tmp_100(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_100);
}
current_location.update_lineno(715);
/* PipeTest.ttcn, line 715 */
TIMER t__guard("t_guard");
current_location.update_lineno(717);
/* PipeTest.ttcn, line 717 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_48), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(718);
/* PipeTest.ttcn, line 718 */
{
tmp_101:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_101;
}
current_location.update_lineno(718);
/* PipeTest.ttcn, line 718 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 718.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(720);
/* PipeTest.ttcn, line 720 */
sleep(3.0e1);
current_location.update_lineno(722);
/* PipeTest.ttcn, line 722 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(723);
/* PipeTest.ttcn, line 723 */
t__guard.start(5.0);
current_location.update_lineno(724);
/* PipeTest.ttcn, line 724 */
{
tmp_102:
alt_status tmp_102_alt_flag_0 = ALT_MAYBE;
alt_status tmp_102_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_102_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(725);
/* PipeTest.ttcn, line 725 */
tmp_102_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_102_alt_flag_0 == ALT_YES) {
current_location.update_lineno(726);
/* PipeTest.ttcn, line 726 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_102_default_flag == ALT_MAYBE) {
tmp_102_default_flag = TTCN_Default::try_altsteps();
if (tmp_102_default_flag == ALT_YES || tmp_102_default_flag == ALT_BREAK) break;
else if (tmp_102_default_flag == ALT_REPEAT) goto tmp_102;
}
current_location.update_lineno(724);
/* PipeTest.ttcn, line 724 */
if (tmp_102_alt_flag_0 == ALT_NO && tmp_102_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 724 and 728.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(729);
/* PipeTest.ttcn, line 729 */
{
tmp_103:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_103;
}
current_location.update_lineno(729);
/* PipeTest.ttcn, line 729 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 729.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(733);
/* PipeTest.ttcn, line 733 */
t__guard.start(5.0);
current_location.update_lineno(734);
/* PipeTest.ttcn, line 734 */
{
tmp_104:
alt_status tmp_104_alt_flag_0 = ALT_MAYBE;
alt_status tmp_104_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_104_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(735);
/* PipeTest.ttcn, line 735 */
tmp_104_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_104_alt_flag_0 == ALT_YES) {
current_location.update_lineno(736);
/* PipeTest.ttcn, line 736 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_104_default_flag == ALT_MAYBE) {
tmp_104_default_flag = TTCN_Default::try_altsteps();
if (tmp_104_default_flag == ALT_YES || tmp_104_default_flag == ALT_BREAK) break;
else if (tmp_104_default_flag == ALT_REPEAT) goto tmp_104;
}
current_location.update_lineno(734);
/* PipeTest.ttcn, line 734 */
if (tmp_104_alt_flag_0 == ALT_NO && tmp_104_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 734 and 738.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(740);
/* PipeTest.ttcn, line 740 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_49), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(741);
/* PipeTest.ttcn, line 741 */
{
tmp_105:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_105;
}
current_location.update_lineno(741);
/* PipeTest.ttcn, line 741 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 741.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(747);
/* PipeTest.ttcn, line 747 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(748);
/* PipeTest.ttcn, line 748 */
t__guard.start(5.0);
current_location.update_lineno(749);
/* PipeTest.ttcn, line 749 */
{
tmp_106:
alt_status tmp_106_alt_flag_0 = ALT_MAYBE;
alt_status tmp_106_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_106_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(750);
/* PipeTest.ttcn, line 750 */
tmp_106_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_106_alt_flag_0 == ALT_YES) {
current_location.update_lineno(751);
/* PipeTest.ttcn, line 751 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_106_default_flag == ALT_MAYBE) {
tmp_106_default_flag = TTCN_Default::try_altsteps();
if (tmp_106_default_flag == ALT_YES || tmp_106_default_flag == ALT_BREAK) break;
else if (tmp_106_default_flag == ALT_REPEAT) goto tmp_106;
}
current_location.update_lineno(749);
/* PipeTest.ttcn, line 749 */
if (tmp_106_alt_flag_0 == ALT_NO && tmp_106_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 749 and 753.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(754);
/* PipeTest.ttcn, line 754 */
{
tmp_107:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_107;
}
current_location.update_lineno(754);
/* PipeTest.ttcn, line 754 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 754.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(757);
/* PipeTest.ttcn, line 757 */
t__guard.start(5.0);
current_location.update_lineno(758);
/* PipeTest.ttcn, line 758 */
{
tmp_108:
alt_status tmp_108_alt_flag_0 = ALT_MAYBE;
alt_status tmp_108_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_108_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(759);
/* PipeTest.ttcn, line 759 */
tmp_108_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_108_alt_flag_0 == ALT_YES) {
current_location.update_lineno(760);
/* PipeTest.ttcn, line 760 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_108_default_flag == ALT_MAYBE) {
tmp_108_default_flag = TTCN_Default::try_altsteps();
if (tmp_108_default_flag == ALT_YES || tmp_108_default_flag == ALT_BREAK) break;
else if (tmp_108_default_flag == ALT_REPEAT) goto tmp_108;
}
current_location.update_lineno(758);
/* PipeTest.ttcn, line 758 */
if (tmp_108_alt_flag_0 == ALT_NO && tmp_108_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 758 and 762.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(764);
/* PipeTest.ttcn, line 764 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_50), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(765);
/* PipeTest.ttcn, line 765 */
{
tmp_109:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_109;
}
current_location.update_lineno(765);
/* PipeTest.ttcn, line 765 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 765.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(767);
/* PipeTest.ttcn, line 767 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(769);
/* PipeTest.ttcn, line 769 */
t__guard.start(5.0);
current_location.update_lineno(770);
/* PipeTest.ttcn, line 770 */
{
tmp_110:
alt_status tmp_110_alt_flag_0 = ALT_MAYBE;
alt_status tmp_110_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_110_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(771);
/* PipeTest.ttcn, line 771 */
tmp_110_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_110_alt_flag_0 == ALT_YES) {
current_location.update_lineno(772);
/* PipeTest.ttcn, line 772 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_110_default_flag == ALT_MAYBE) {
tmp_110_default_flag = TTCN_Default::try_altsteps();
if (tmp_110_default_flag == ALT_YES || tmp_110_default_flag == ALT_BREAK) break;
else if (tmp_110_default_flag == ALT_REPEAT) goto tmp_110;
}
current_location.update_lineno(770);
/* PipeTest.ttcn, line 770 */
if (tmp_110_alt_flag_0 == ALT_NO && tmp_110_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 770 and 774.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(775);
/* PipeTest.ttcn, line 775 */
{
tmp_111:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_111;
}
current_location.update_lineno(775);
/* PipeTest.ttcn, line 775 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 775.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(777);
/* PipeTest.ttcn, line 777 */
t__guard.start(5.0);
current_location.update_lineno(778);
/* PipeTest.ttcn, line 778 */
{
tmp_112:
alt_status tmp_112_alt_flag_0 = ALT_MAYBE;
alt_status tmp_112_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_112_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(779);
/* PipeTest.ttcn, line 779 */
tmp_112_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_112_alt_flag_0 == ALT_YES) {
current_location.update_lineno(780);
/* PipeTest.ttcn, line 780 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_112_default_flag == ALT_MAYBE) {
tmp_112_default_flag = TTCN_Default::try_altsteps();
if (tmp_112_default_flag == ALT_YES || tmp_112_default_flag == ALT_BREAK) break;
else if (tmp_112_default_flag == ALT_REPEAT) goto tmp_112;
}
current_location.update_lineno(778);
/* PipeTest.ttcn, line 778 */
if (tmp_112_alt_flag_0 == ALT_NO && tmp_112_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 778 and 782.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(784);
/* PipeTest.ttcn, line 784 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_51), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(785);
/* PipeTest.ttcn, line 785 */
{
tmp_113:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_113;
}
current_location.update_lineno(785);
/* PipeTest.ttcn, line 785 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 785.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(787);
/* PipeTest.ttcn, line 787 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(789);
/* PipeTest.ttcn, line 789 */
t__guard.start(5.0);
current_location.update_lineno(790);
/* PipeTest.ttcn, line 790 */
{
tmp_114:
alt_status tmp_114_alt_flag_0 = ALT_MAYBE;
alt_status tmp_114_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_114_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(791);
/* PipeTest.ttcn, line 791 */
tmp_114_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_114_alt_flag_0 == ALT_YES) {
current_location.update_lineno(792);
/* PipeTest.ttcn, line 792 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_114_default_flag == ALT_MAYBE) {
tmp_114_default_flag = TTCN_Default::try_altsteps();
if (tmp_114_default_flag == ALT_YES || tmp_114_default_flag == ALT_BREAK) break;
else if (tmp_114_default_flag == ALT_REPEAT) goto tmp_114;
}
current_location.update_lineno(790);
/* PipeTest.ttcn, line 790 */
if (tmp_114_alt_flag_0 == ALT_NO && tmp_114_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 790 and 794.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(795);
/* PipeTest.ttcn, line 795 */
{
tmp_115:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_115;
}
current_location.update_lineno(795);
/* PipeTest.ttcn, line 795 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 795.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(797);
/* PipeTest.ttcn, line 797 */
t__guard.start(5.0);
current_location.update_lineno(798);
/* PipeTest.ttcn, line 798 */
{
tmp_116:
alt_status tmp_116_alt_flag_0 = ALT_MAYBE;
alt_status tmp_116_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_116_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(799);
/* PipeTest.ttcn, line 799 */
tmp_116_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_116_alt_flag_0 == ALT_YES) {
current_location.update_lineno(800);
/* PipeTest.ttcn, line 800 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_116_default_flag == ALT_MAYBE) {
tmp_116_default_flag = TTCN_Default::try_altsteps();
if (tmp_116_default_flag == ALT_YES || tmp_116_default_flag == ALT_BREAK) break;
else if (tmp_116_default_flag == ALT_REPEAT) goto tmp_116;
}
current_location.update_lineno(798);
/* PipeTest.ttcn, line 798 */
if (tmp_116_alt_flag_0 == ALT_NO && tmp_116_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 798 and 802.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(805);
/* PipeTest.ttcn, line 805 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_52), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(806);
/* PipeTest.ttcn, line 806 */
{
tmp_117:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_117;
}
current_location.update_lineno(806);
/* PipeTest.ttcn, line 806 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 806.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(808);
/* PipeTest.ttcn, line 808 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(809);
/* PipeTest.ttcn, line 809 */
t__guard.start(5.0);
current_location.update_lineno(810);
/* PipeTest.ttcn, line 810 */
{
tmp_118:
alt_status tmp_118_alt_flag_0 = ALT_MAYBE;
alt_status tmp_118_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_118_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(811);
/* PipeTest.ttcn, line 811 */
tmp_118_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_118_alt_flag_0 == ALT_YES) {
current_location.update_lineno(812);
/* PipeTest.ttcn, line 812 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_118_default_flag == ALT_MAYBE) {
tmp_118_default_flag = TTCN_Default::try_altsteps();
if (tmp_118_default_flag == ALT_YES || tmp_118_default_flag == ALT_BREAK) break;
else if (tmp_118_default_flag == ALT_REPEAT) goto tmp_118;
}
current_location.update_lineno(810);
/* PipeTest.ttcn, line 810 */
if (tmp_118_alt_flag_0 == ALT_NO && tmp_118_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 810 and 814.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(815);
/* PipeTest.ttcn, line 815 */
{
tmp_119:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_119;
}
current_location.update_lineno(815);
/* PipeTest.ttcn, line 815 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 815.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(816);
/* PipeTest.ttcn, line 816 */
t__guard.start(5.0);
current_location.update_lineno(817);
/* PipeTest.ttcn, line 817 */
{
tmp_120:
alt_status tmp_120_alt_flag_0 = ALT_MAYBE;
alt_status tmp_120_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_120_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(818);
/* PipeTest.ttcn, line 818 */
tmp_120_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_120_alt_flag_0 == ALT_YES) {
current_location.update_lineno(819);
/* PipeTest.ttcn, line 819 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_120_default_flag == ALT_MAYBE) {
tmp_120_default_flag = TTCN_Default::try_altsteps();
if (tmp_120_default_flag == ALT_YES || tmp_120_default_flag == ALT_BREAK) break;
else if (tmp_120_default_flag == ALT_REPEAT) goto tmp_120;
}
current_location.update_lineno(817);
/* PipeTest.ttcn, line 817 */
if (tmp_120_alt_flag_0 == ALT_NO && tmp_120_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 817 and 821.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(823);
/* PipeTest.ttcn, line 823 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_53), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(824);
/* PipeTest.ttcn, line 824 */
{
tmp_121:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_121;
}
current_location.update_lineno(824);
/* PipeTest.ttcn, line 824 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 824.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(826);
/* PipeTest.ttcn, line 826 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(828);
/* PipeTest.ttcn, line 828 */
t__guard.start(5.0);
current_location.update_lineno(829);
/* PipeTest.ttcn, line 829 */
{
tmp_122:
alt_status tmp_122_alt_flag_0 = ALT_MAYBE;
alt_status tmp_122_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_122_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(830);
/* PipeTest.ttcn, line 830 */
tmp_122_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_122_alt_flag_0 == ALT_YES) {
current_location.update_lineno(831);
/* PipeTest.ttcn, line 831 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_122_default_flag == ALT_MAYBE) {
tmp_122_default_flag = TTCN_Default::try_altsteps();
if (tmp_122_default_flag == ALT_YES || tmp_122_default_flag == ALT_BREAK) break;
else if (tmp_122_default_flag == ALT_REPEAT) goto tmp_122;
}
current_location.update_lineno(829);
/* PipeTest.ttcn, line 829 */
if (tmp_122_alt_flag_0 == ALT_NO && tmp_122_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 829 and 833.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(834);
/* PipeTest.ttcn, line 834 */
{
tmp_123:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_123;
}
current_location.update_lineno(834);
/* PipeTest.ttcn, line 834 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 834.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(836);
/* PipeTest.ttcn, line 836 */
t__guard.start(5.0);
current_location.update_lineno(837);
/* PipeTest.ttcn, line 837 */
{
tmp_124:
alt_status tmp_124_alt_flag_0 = ALT_MAYBE;
alt_status tmp_124_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_124_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(838);
/* PipeTest.ttcn, line 838 */
tmp_124_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_124_alt_flag_0 == ALT_YES) {
current_location.update_lineno(839);
/* PipeTest.ttcn, line 839 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_124_default_flag == ALT_MAYBE) {
tmp_124_default_flag = TTCN_Default::try_altsteps();
if (tmp_124_default_flag == ALT_YES || tmp_124_default_flag == ALT_BREAK) break;
else if (tmp_124_default_flag == ALT_REPEAT) goto tmp_124;
}
current_location.update_lineno(837);
/* PipeTest.ttcn, line 837 */
if (tmp_124_alt_flag_0 == ALT_NO && tmp_124_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 837 and 841.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(843);
/* PipeTest.ttcn, line 843 */
sleep(1.0e2);
current_location.update_lineno(845);
/* PipeTest.ttcn, line 845 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_54)), NULL);
current_location.update_lineno(846);
/* PipeTest.ttcn, line 846 */
{
tmp_125:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_125;
}
current_location.update_lineno(846);
/* PipeTest.ttcn, line 846 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 846.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(848);
/* PipeTest.ttcn, line 848 */
t__guard.start(5.0);
current_location.update_lineno(849);
/* PipeTest.ttcn, line 849 */
{
tmp_126:
alt_status tmp_126_alt_flag_0 = ALT_MAYBE;
alt_status tmp_126_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_126_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(850);
/* PipeTest.ttcn, line 850 */
tmp_126_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_126_alt_flag_0 == ALT_YES) {
current_location.update_lineno(851);
/* PipeTest.ttcn, line 851 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_126_default_flag == ALT_MAYBE) {
tmp_126_default_flag = TTCN_Default::try_altsteps();
if (tmp_126_default_flag == ALT_YES || tmp_126_default_flag == ALT_BREAK) break;
else if (tmp_126_default_flag == ALT_REPEAT) goto tmp_126;
}
current_location.update_lineno(849);
/* PipeTest.ttcn, line 849 */
if (tmp_126_alt_flag_0 == ALT_NO && tmp_126_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 849 and 853.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(855);
/* PipeTest.ttcn, line 855 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(856);
/* PipeTest.ttcn, line 856 */
t__guard.start(5.0);
current_location.update_lineno(857);
/* PipeTest.ttcn, line 857 */
{
tmp_127:
alt_status tmp_127_alt_flag_0 = ALT_MAYBE;
alt_status tmp_127_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_127_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(858);
/* PipeTest.ttcn, line 858 */
tmp_127_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_127_alt_flag_0 == ALT_YES) {
current_location.update_lineno(859);
/* PipeTest.ttcn, line 859 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_127_default_flag == ALT_MAYBE) {
tmp_127_default_flag = TTCN_Default::try_altsteps();
if (tmp_127_default_flag == ALT_YES || tmp_127_default_flag == ALT_BREAK) break;
else if (tmp_127_default_flag == ALT_REPEAT) goto tmp_127;
}
current_location.update_lineno(857);
/* PipeTest.ttcn, line 857 */
if (tmp_127_alt_flag_0 == ALT_NO && tmp_127_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 857 and 861.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(862);
/* PipeTest.ttcn, line 862 */
{
tmp_128:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_128;
}
current_location.update_lineno(862);
/* PipeTest.ttcn, line 862 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 862.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(865);
/* PipeTest.ttcn, line 865 */
t__guard.start(5.0);
current_location.update_lineno(866);
/* PipeTest.ttcn, line 866 */
{
tmp_129:
alt_status tmp_129_alt_flag_0 = ALT_MAYBE;
alt_status tmp_129_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_129_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(867);
/* PipeTest.ttcn, line 867 */
tmp_129_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_129_alt_flag_0 == ALT_YES) {
current_location.update_lineno(868);
/* PipeTest.ttcn, line 868 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_129_default_flag == ALT_MAYBE) {
tmp_129_default_flag = TTCN_Default::try_altsteps();
if (tmp_129_default_flag == ALT_YES || tmp_129_default_flag == ALT_BREAK) break;
else if (tmp_129_default_flag == ALT_REPEAT) goto tmp_129;
}
current_location.update_lineno(866);
/* PipeTest.ttcn, line 866 */
if (tmp_129_alt_flag_0 == ALT_NO && tmp_129_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 866 and 870.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(872);
/* PipeTest.ttcn, line 872 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_55)), NULL);
current_location.update_lineno(873);
/* PipeTest.ttcn, line 873 */
{
tmp_130:
alt_status tmp_130_alt_flag_0 = ALT_MAYBE;
alt_status tmp_130_alt_flag_1 = ALT_MAYBE;
alt_status tmp_130_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_130_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(875);
/* PipeTest.ttcn, line 875 */
tmp_130_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_130_alt_flag_0 == ALT_YES) {
current_location.update_lineno(876);
/* PipeTest.ttcn, line 876 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_130_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(879);
/* PipeTest.ttcn, line 879 */
tmp_130_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_130_alt_flag_1 == ALT_YES) {
current_location.update_lineno(880);
/* PipeTest.ttcn, line 880 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_130_default_flag == ALT_MAYBE) {
tmp_130_default_flag = TTCN_Default::try_altsteps();
if (tmp_130_default_flag == ALT_YES || tmp_130_default_flag == ALT_BREAK) break;
else if (tmp_130_default_flag == ALT_REPEAT) goto tmp_130;
}
current_location.update_lineno(873);
/* PipeTest.ttcn, line 873 */
if (tmp_130_alt_flag_0 == ALT_NO && tmp_130_alt_flag_1 == ALT_NO && tmp_130_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 873 and 883.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(885);
/* PipeTest.ttcn, line 885 */
{
Map_Params tmp_131(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_131);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Node_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__individual__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 889, TTCN_Location::LOCATION_TESTCASE, "TC_individual_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_individual_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(892);
/* PipeTest.ttcn, line 892 */
{
Map_Params tmp_132(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_132);
}
current_location.update_lineno(893);
/* PipeTest.ttcn, line 893 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_56)), NULL);
current_location.update_lineno(895);
/* PipeTest.ttcn, line 895 */
{
tmp_133:
alt_status tmp_133_alt_flag_0 = ALT_MAYBE;
alt_status tmp_133_alt_flag_1 = ALT_MAYBE;
alt_status tmp_133_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_133_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(897);
/* PipeTest.ttcn, line 897 */
tmp_133_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_133_alt_flag_0 == ALT_YES) {
current_location.update_lineno(898);
/* PipeTest.ttcn, line 898 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_133_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(901);
/* PipeTest.ttcn, line 901 */
tmp_133_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_133_alt_flag_1 == ALT_YES) {
current_location.update_lineno(902);
/* PipeTest.ttcn, line 902 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_133_default_flag == ALT_MAYBE) {
tmp_133_default_flag = TTCN_Default::try_altsteps();
if (tmp_133_default_flag == ALT_YES || tmp_133_default_flag == ALT_BREAK) break;
else if (tmp_133_default_flag == ALT_REPEAT) goto tmp_133;
}
current_location.update_lineno(895);
/* PipeTest.ttcn, line 895 */
if (tmp_133_alt_flag_0 == ALT_NO && tmp_133_alt_flag_1 == ALT_NO && tmp_133_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 895 and 904.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(906);
/* PipeTest.ttcn, line 906 */
{
Map_Params tmp_134(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_134);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_individual_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__individual__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 910, TTCN_Location::LOCATION_TESTCASE, "TC_individual_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_individual_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(913);
/* PipeTest.ttcn, line 913 */
{
Map_Params tmp_135(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_135);
}
current_location.update_lineno(914);
/* PipeTest.ttcn, line 914 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_57)), NULL);
current_location.update_lineno(916);
/* PipeTest.ttcn, line 916 */
{
tmp_136:
alt_status tmp_136_alt_flag_0 = ALT_MAYBE;
alt_status tmp_136_alt_flag_1 = ALT_MAYBE;
alt_status tmp_136_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_136_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(918);
/* PipeTest.ttcn, line 918 */
tmp_136_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_136_alt_flag_0 == ALT_YES) {
current_location.update_lineno(919);
/* PipeTest.ttcn, line 919 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_136_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(922);
/* PipeTest.ttcn, line 922 */
tmp_136_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_136_alt_flag_1 == ALT_YES) {
current_location.update_lineno(923);
/* PipeTest.ttcn, line 923 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_136_default_flag == ALT_MAYBE) {
tmp_136_default_flag = TTCN_Default::try_altsteps();
if (tmp_136_default_flag == ALT_YES || tmp_136_default_flag == ALT_BREAK) break;
else if (tmp_136_default_flag == ALT_REPEAT) goto tmp_136;
}
current_location.update_lineno(916);
/* PipeTest.ttcn, line 916 */
if (tmp_136_alt_flag_0 == ALT_NO && tmp_136_alt_flag_1 == ALT_NO && tmp_136_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 916 and 925.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(927);
/* PipeTest.ttcn, line 927 */
{
Map_Params tmp_137(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_137);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_individual_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Network__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 931, TTCN_Location::LOCATION_TESTCASE, "TC_Network_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Network_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(934);
/* PipeTest.ttcn, line 934 */
{
Map_Params tmp_138(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_138);
}
current_location.update_lineno(935);
/* PipeTest.ttcn, line 935 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_58)), NULL);
current_location.update_lineno(937);
/* PipeTest.ttcn, line 937 */
{
tmp_139:
alt_status tmp_139_alt_flag_0 = ALT_MAYBE;
alt_status tmp_139_alt_flag_1 = ALT_MAYBE;
alt_status tmp_139_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_139_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(939);
/* PipeTest.ttcn, line 939 */
tmp_139_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_139_alt_flag_0 == ALT_YES) {
current_location.update_lineno(940);
/* PipeTest.ttcn, line 940 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_139_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(943);
/* PipeTest.ttcn, line 943 */
tmp_139_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_139_alt_flag_1 == ALT_YES) {
current_location.update_lineno(944);
/* PipeTest.ttcn, line 944 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_139_default_flag == ALT_MAYBE) {
tmp_139_default_flag = TTCN_Default::try_altsteps();
if (tmp_139_default_flag == ALT_YES || tmp_139_default_flag == ALT_BREAK) break;
else if (tmp_139_default_flag == ALT_REPEAT) goto tmp_139;
}
current_location.update_lineno(937);
/* PipeTest.ttcn, line 937 */
if (tmp_139_alt_flag_0 == ALT_NO && tmp_139_alt_flag_1 == ALT_NO && tmp_139_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 937 and 946.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(948);
/* PipeTest.ttcn, line 948 */
{
Map_Params tmp_140(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_140);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Network_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Network__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 952, TTCN_Location::LOCATION_TESTCASE, "TC_Network_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Network_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(955);
/* PipeTest.ttcn, line 955 */
{
Map_Params tmp_141(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_141);
}
current_location.update_lineno(956);
/* PipeTest.ttcn, line 956 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_59)), NULL);
current_location.update_lineno(958);
/* PipeTest.ttcn, line 958 */
{
tmp_142:
alt_status tmp_142_alt_flag_0 = ALT_MAYBE;
alt_status tmp_142_alt_flag_1 = ALT_MAYBE;
alt_status tmp_142_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_142_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(960);
/* PipeTest.ttcn, line 960 */
tmp_142_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_142_alt_flag_0 == ALT_YES) {
current_location.update_lineno(961);
/* PipeTest.ttcn, line 961 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_142_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(964);
/* PipeTest.ttcn, line 964 */
tmp_142_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_142_alt_flag_1 == ALT_YES) {
current_location.update_lineno(965);
/* PipeTest.ttcn, line 965 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_142_default_flag == ALT_MAYBE) {
tmp_142_default_flag = TTCN_Default::try_altsteps();
if (tmp_142_default_flag == ALT_YES || tmp_142_default_flag == ALT_BREAK) break;
else if (tmp_142_default_flag == ALT_REPEAT) goto tmp_142;
}
current_location.update_lineno(958);
/* PipeTest.ttcn, line 958 */
if (tmp_142_alt_flag_0 == ALT_NO && tmp_142_alt_flag_1 == ALT_NO && tmp_142_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 958 and 967.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(969);
/* PipeTest.ttcn, line 969 */
{
Map_Params tmp_143(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_143);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Network_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Injection__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 973, TTCN_Location::LOCATION_TESTCASE, "TC_Injection_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Injection_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(976);
/* PipeTest.ttcn, line 976 */
{
Map_Params tmp_144(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_144);
}
current_location.update_lineno(978);
/* PipeTest.ttcn, line 978 */
TIMER t__guard("t_guard");
current_location.update_lineno(980);
/* PipeTest.ttcn, line 980 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_60), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(981);
/* PipeTest.ttcn, line 981 */
{
tmp_145:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_145;
}
current_location.update_lineno(981);
/* PipeTest.ttcn, line 981 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 981.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(983);
/* PipeTest.ttcn, line 983 */
sleep(3.0e1);
current_location.update_lineno(985);
/* PipeTest.ttcn, line 985 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(986);
/* PipeTest.ttcn, line 986 */
t__guard.start(5.0);
current_location.update_lineno(987);
/* PipeTest.ttcn, line 987 */
{
tmp_146:
alt_status tmp_146_alt_flag_0 = ALT_MAYBE;
alt_status tmp_146_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_146_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(988);
/* PipeTest.ttcn, line 988 */
tmp_146_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_146_alt_flag_0 == ALT_YES) {
current_location.update_lineno(989);
/* PipeTest.ttcn, line 989 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_146_default_flag == ALT_MAYBE) {
tmp_146_default_flag = TTCN_Default::try_altsteps();
if (tmp_146_default_flag == ALT_YES || tmp_146_default_flag == ALT_BREAK) break;
else if (tmp_146_default_flag == ALT_REPEAT) goto tmp_146;
}
current_location.update_lineno(987);
/* PipeTest.ttcn, line 987 */
if (tmp_146_alt_flag_0 == ALT_NO && tmp_146_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 987 and 991.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(992);
/* PipeTest.ttcn, line 992 */
{
tmp_147:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_147;
}
current_location.update_lineno(992);
/* PipeTest.ttcn, line 992 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 992.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(996);
/* PipeTest.ttcn, line 996 */
t__guard.start(5.0);
current_location.update_lineno(997);
/* PipeTest.ttcn, line 997 */
{
tmp_148:
alt_status tmp_148_alt_flag_0 = ALT_MAYBE;
alt_status tmp_148_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_148_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(998);
/* PipeTest.ttcn, line 998 */
tmp_148_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_148_alt_flag_0 == ALT_YES) {
current_location.update_lineno(999);
/* PipeTest.ttcn, line 999 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_148_default_flag == ALT_MAYBE) {
tmp_148_default_flag = TTCN_Default::try_altsteps();
if (tmp_148_default_flag == ALT_YES || tmp_148_default_flag == ALT_BREAK) break;
else if (tmp_148_default_flag == ALT_REPEAT) goto tmp_148;
}
current_location.update_lineno(997);
/* PipeTest.ttcn, line 997 */
if (tmp_148_alt_flag_0 == ALT_NO && tmp_148_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 997 and 1001.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1003);
/* PipeTest.ttcn, line 1003 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_61), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1004);
/* PipeTest.ttcn, line 1004 */
{
tmp_149:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_149;
}
current_location.update_lineno(1004);
/* PipeTest.ttcn, line 1004 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1004.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1010);
/* PipeTest.ttcn, line 1010 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1011);
/* PipeTest.ttcn, line 1011 */
t__guard.start(5.0);
current_location.update_lineno(1012);
/* PipeTest.ttcn, line 1012 */
{
tmp_150:
alt_status tmp_150_alt_flag_0 = ALT_MAYBE;
alt_status tmp_150_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_150_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1013);
/* PipeTest.ttcn, line 1013 */
tmp_150_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_150_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1014);
/* PipeTest.ttcn, line 1014 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_150_default_flag == ALT_MAYBE) {
tmp_150_default_flag = TTCN_Default::try_altsteps();
if (tmp_150_default_flag == ALT_YES || tmp_150_default_flag == ALT_BREAK) break;
else if (tmp_150_default_flag == ALT_REPEAT) goto tmp_150;
}
current_location.update_lineno(1012);
/* PipeTest.ttcn, line 1012 */
if (tmp_150_alt_flag_0 == ALT_NO && tmp_150_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1012 and 1016.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1017);
/* PipeTest.ttcn, line 1017 */
{
tmp_151:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_151;
}
current_location.update_lineno(1017);
/* PipeTest.ttcn, line 1017 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1017.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1020);
/* PipeTest.ttcn, line 1020 */
t__guard.start(5.0);
current_location.update_lineno(1021);
/* PipeTest.ttcn, line 1021 */
{
tmp_152:
alt_status tmp_152_alt_flag_0 = ALT_MAYBE;
alt_status tmp_152_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_152_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1022);
/* PipeTest.ttcn, line 1022 */
tmp_152_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_152_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1023);
/* PipeTest.ttcn, line 1023 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_152_default_flag == ALT_MAYBE) {
tmp_152_default_flag = TTCN_Default::try_altsteps();
if (tmp_152_default_flag == ALT_YES || tmp_152_default_flag == ALT_BREAK) break;
else if (tmp_152_default_flag == ALT_REPEAT) goto tmp_152;
}
current_location.update_lineno(1021);
/* PipeTest.ttcn, line 1021 */
if (tmp_152_alt_flag_0 == ALT_NO && tmp_152_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1021 and 1025.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1027);
/* PipeTest.ttcn, line 1027 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_62), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1028);
/* PipeTest.ttcn, line 1028 */
{
tmp_153:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_153;
}
current_location.update_lineno(1028);
/* PipeTest.ttcn, line 1028 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1028.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1030);
/* PipeTest.ttcn, line 1030 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1032);
/* PipeTest.ttcn, line 1032 */
t__guard.start(5.0);
current_location.update_lineno(1033);
/* PipeTest.ttcn, line 1033 */
{
tmp_154:
alt_status tmp_154_alt_flag_0 = ALT_MAYBE;
alt_status tmp_154_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_154_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1034);
/* PipeTest.ttcn, line 1034 */
tmp_154_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_154_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1035);
/* PipeTest.ttcn, line 1035 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_154_default_flag == ALT_MAYBE) {
tmp_154_default_flag = TTCN_Default::try_altsteps();
if (tmp_154_default_flag == ALT_YES || tmp_154_default_flag == ALT_BREAK) break;
else if (tmp_154_default_flag == ALT_REPEAT) goto tmp_154;
}
current_location.update_lineno(1033);
/* PipeTest.ttcn, line 1033 */
if (tmp_154_alt_flag_0 == ALT_NO && tmp_154_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1033 and 1037.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1038);
/* PipeTest.ttcn, line 1038 */
{
tmp_155:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_155;
}
current_location.update_lineno(1038);
/* PipeTest.ttcn, line 1038 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1038.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1040);
/* PipeTest.ttcn, line 1040 */
t__guard.start(5.0);
current_location.update_lineno(1041);
/* PipeTest.ttcn, line 1041 */
{
tmp_156:
alt_status tmp_156_alt_flag_0 = ALT_MAYBE;
alt_status tmp_156_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_156_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1042);
/* PipeTest.ttcn, line 1042 */
tmp_156_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_156_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1043);
/* PipeTest.ttcn, line 1043 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_156_default_flag == ALT_MAYBE) {
tmp_156_default_flag = TTCN_Default::try_altsteps();
if (tmp_156_default_flag == ALT_YES || tmp_156_default_flag == ALT_BREAK) break;
else if (tmp_156_default_flag == ALT_REPEAT) goto tmp_156;
}
current_location.update_lineno(1041);
/* PipeTest.ttcn, line 1041 */
if (tmp_156_alt_flag_0 == ALT_NO && tmp_156_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1041 and 1045.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1047);
/* PipeTest.ttcn, line 1047 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_63), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1048);
/* PipeTest.ttcn, line 1048 */
{
tmp_157:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_157;
}
current_location.update_lineno(1048);
/* PipeTest.ttcn, line 1048 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1048.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1050);
/* PipeTest.ttcn, line 1050 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1052);
/* PipeTest.ttcn, line 1052 */
t__guard.start(5.0);
current_location.update_lineno(1053);
/* PipeTest.ttcn, line 1053 */
{
tmp_158:
alt_status tmp_158_alt_flag_0 = ALT_MAYBE;
alt_status tmp_158_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_158_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1054);
/* PipeTest.ttcn, line 1054 */
tmp_158_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_158_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1055);
/* PipeTest.ttcn, line 1055 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_158_default_flag == ALT_MAYBE) {
tmp_158_default_flag = TTCN_Default::try_altsteps();
if (tmp_158_default_flag == ALT_YES || tmp_158_default_flag == ALT_BREAK) break;
else if (tmp_158_default_flag == ALT_REPEAT) goto tmp_158;
}
current_location.update_lineno(1053);
/* PipeTest.ttcn, line 1053 */
if (tmp_158_alt_flag_0 == ALT_NO && tmp_158_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1053 and 1057.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1058);
/* PipeTest.ttcn, line 1058 */
{
tmp_159:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_159;
}
current_location.update_lineno(1058);
/* PipeTest.ttcn, line 1058 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1058.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1060);
/* PipeTest.ttcn, line 1060 */
t__guard.start(5.0);
current_location.update_lineno(1061);
/* PipeTest.ttcn, line 1061 */
{
tmp_160:
alt_status tmp_160_alt_flag_0 = ALT_MAYBE;
alt_status tmp_160_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_160_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1062);
/* PipeTest.ttcn, line 1062 */
tmp_160_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_160_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1063);
/* PipeTest.ttcn, line 1063 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_160_default_flag == ALT_MAYBE) {
tmp_160_default_flag = TTCN_Default::try_altsteps();
if (tmp_160_default_flag == ALT_YES || tmp_160_default_flag == ALT_BREAK) break;
else if (tmp_160_default_flag == ALT_REPEAT) goto tmp_160;
}
current_location.update_lineno(1061);
/* PipeTest.ttcn, line 1061 */
if (tmp_160_alt_flag_0 == ALT_NO && tmp_160_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1061 and 1065.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1068);
/* PipeTest.ttcn, line 1068 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_64), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1069);
/* PipeTest.ttcn, line 1069 */
{
tmp_161:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_161;
}
current_location.update_lineno(1069);
/* PipeTest.ttcn, line 1069 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1069.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1071);
/* PipeTest.ttcn, line 1071 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1072);
/* PipeTest.ttcn, line 1072 */
t__guard.start(5.0);
current_location.update_lineno(1073);
/* PipeTest.ttcn, line 1073 */
{
tmp_162:
alt_status tmp_162_alt_flag_0 = ALT_MAYBE;
alt_status tmp_162_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_162_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1074);
/* PipeTest.ttcn, line 1074 */
tmp_162_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_162_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1075);
/* PipeTest.ttcn, line 1075 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_162_default_flag == ALT_MAYBE) {
tmp_162_default_flag = TTCN_Default::try_altsteps();
if (tmp_162_default_flag == ALT_YES || tmp_162_default_flag == ALT_BREAK) break;
else if (tmp_162_default_flag == ALT_REPEAT) goto tmp_162;
}
current_location.update_lineno(1073);
/* PipeTest.ttcn, line 1073 */
if (tmp_162_alt_flag_0 == ALT_NO && tmp_162_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1073 and 1077.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1078);
/* PipeTest.ttcn, line 1078 */
{
tmp_163:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_163;
}
current_location.update_lineno(1078);
/* PipeTest.ttcn, line 1078 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1078.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1079);
/* PipeTest.ttcn, line 1079 */
t__guard.start(5.0);
current_location.update_lineno(1080);
/* PipeTest.ttcn, line 1080 */
{
tmp_164:
alt_status tmp_164_alt_flag_0 = ALT_MAYBE;
alt_status tmp_164_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_164_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1081);
/* PipeTest.ttcn, line 1081 */
tmp_164_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_164_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1082);
/* PipeTest.ttcn, line 1082 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_164_default_flag == ALT_MAYBE) {
tmp_164_default_flag = TTCN_Default::try_altsteps();
if (tmp_164_default_flag == ALT_YES || tmp_164_default_flag == ALT_BREAK) break;
else if (tmp_164_default_flag == ALT_REPEAT) goto tmp_164;
}
current_location.update_lineno(1080);
/* PipeTest.ttcn, line 1080 */
if (tmp_164_alt_flag_0 == ALT_NO && tmp_164_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1080 and 1084.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1086);
/* PipeTest.ttcn, line 1086 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_65), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1087);
/* PipeTest.ttcn, line 1087 */
{
tmp_165:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_165;
}
current_location.update_lineno(1087);
/* PipeTest.ttcn, line 1087 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1087.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1089);
/* PipeTest.ttcn, line 1089 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1091);
/* PipeTest.ttcn, line 1091 */
t__guard.start(5.0);
current_location.update_lineno(1092);
/* PipeTest.ttcn, line 1092 */
{
tmp_166:
alt_status tmp_166_alt_flag_0 = ALT_MAYBE;
alt_status tmp_166_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_166_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1093);
/* PipeTest.ttcn, line 1093 */
tmp_166_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_166_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1094);
/* PipeTest.ttcn, line 1094 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_166_default_flag == ALT_MAYBE) {
tmp_166_default_flag = TTCN_Default::try_altsteps();
if (tmp_166_default_flag == ALT_YES || tmp_166_default_flag == ALT_BREAK) break;
else if (tmp_166_default_flag == ALT_REPEAT) goto tmp_166;
}
current_location.update_lineno(1092);
/* PipeTest.ttcn, line 1092 */
if (tmp_166_alt_flag_0 == ALT_NO && tmp_166_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1092 and 1096.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1097);
/* PipeTest.ttcn, line 1097 */
{
tmp_167:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_167;
}
current_location.update_lineno(1097);
/* PipeTest.ttcn, line 1097 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1097.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1099);
/* PipeTest.ttcn, line 1099 */
t__guard.start(5.0);
current_location.update_lineno(1100);
/* PipeTest.ttcn, line 1100 */
{
tmp_168:
alt_status tmp_168_alt_flag_0 = ALT_MAYBE;
alt_status tmp_168_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_168_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1101);
/* PipeTest.ttcn, line 1101 */
tmp_168_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_168_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1102);
/* PipeTest.ttcn, line 1102 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_168_default_flag == ALT_MAYBE) {
tmp_168_default_flag = TTCN_Default::try_altsteps();
if (tmp_168_default_flag == ALT_YES || tmp_168_default_flag == ALT_BREAK) break;
else if (tmp_168_default_flag == ALT_REPEAT) goto tmp_168;
}
current_location.update_lineno(1100);
/* PipeTest.ttcn, line 1100 */
if (tmp_168_alt_flag_0 == ALT_NO && tmp_168_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1100 and 1104.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1106);
/* PipeTest.ttcn, line 1106 */
sleep(1.0e2);
current_location.update_lineno(1108);
/* PipeTest.ttcn, line 1108 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_66)), NULL);
current_location.update_lineno(1109);
/* PipeTest.ttcn, line 1109 */
{
tmp_169:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_169;
}
current_location.update_lineno(1109);
/* PipeTest.ttcn, line 1109 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1109.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1111);
/* PipeTest.ttcn, line 1111 */
t__guard.start(5.0);
current_location.update_lineno(1112);
/* PipeTest.ttcn, line 1112 */
{
tmp_170:
alt_status tmp_170_alt_flag_0 = ALT_MAYBE;
alt_status tmp_170_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_170_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1113);
/* PipeTest.ttcn, line 1113 */
tmp_170_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_170_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1114);
/* PipeTest.ttcn, line 1114 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_170_default_flag == ALT_MAYBE) {
tmp_170_default_flag = TTCN_Default::try_altsteps();
if (tmp_170_default_flag == ALT_YES || tmp_170_default_flag == ALT_BREAK) break;
else if (tmp_170_default_flag == ALT_REPEAT) goto tmp_170;
}
current_location.update_lineno(1112);
/* PipeTest.ttcn, line 1112 */
if (tmp_170_alt_flag_0 == ALT_NO && tmp_170_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1112 and 1116.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1118);
/* PipeTest.ttcn, line 1118 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1119);
/* PipeTest.ttcn, line 1119 */
t__guard.start(5.0);
current_location.update_lineno(1120);
/* PipeTest.ttcn, line 1120 */
{
tmp_171:
alt_status tmp_171_alt_flag_0 = ALT_MAYBE;
alt_status tmp_171_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_171_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1121);
/* PipeTest.ttcn, line 1121 */
tmp_171_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_171_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1122);
/* PipeTest.ttcn, line 1122 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_171_default_flag == ALT_MAYBE) {
tmp_171_default_flag = TTCN_Default::try_altsteps();
if (tmp_171_default_flag == ALT_YES || tmp_171_default_flag == ALT_BREAK) break;
else if (tmp_171_default_flag == ALT_REPEAT) goto tmp_171;
}
current_location.update_lineno(1120);
/* PipeTest.ttcn, line 1120 */
if (tmp_171_alt_flag_0 == ALT_NO && tmp_171_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1120 and 1124.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1125);
/* PipeTest.ttcn, line 1125 */
{
tmp_172:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_172;
}
current_location.update_lineno(1125);
/* PipeTest.ttcn, line 1125 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1125.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1128);
/* PipeTest.ttcn, line 1128 */
t__guard.start(5.0);
current_location.update_lineno(1129);
/* PipeTest.ttcn, line 1129 */
{
tmp_173:
alt_status tmp_173_alt_flag_0 = ALT_MAYBE;
alt_status tmp_173_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_173_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1130);
/* PipeTest.ttcn, line 1130 */
tmp_173_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_173_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1131);
/* PipeTest.ttcn, line 1131 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_173_default_flag == ALT_MAYBE) {
tmp_173_default_flag = TTCN_Default::try_altsteps();
if (tmp_173_default_flag == ALT_YES || tmp_173_default_flag == ALT_BREAK) break;
else if (tmp_173_default_flag == ALT_REPEAT) goto tmp_173;
}
current_location.update_lineno(1129);
/* PipeTest.ttcn, line 1129 */
if (tmp_173_alt_flag_0 == ALT_NO && tmp_173_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1129 and 1133.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1135);
/* PipeTest.ttcn, line 1135 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_67)), NULL);
current_location.update_lineno(1136);
/* PipeTest.ttcn, line 1136 */
{
tmp_174:
alt_status tmp_174_alt_flag_0 = ALT_MAYBE;
alt_status tmp_174_alt_flag_1 = ALT_MAYBE;
alt_status tmp_174_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_174_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1138);
/* PipeTest.ttcn, line 1138 */
tmp_174_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_174_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1139);
/* PipeTest.ttcn, line 1139 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_174_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1142);
/* PipeTest.ttcn, line 1142 */
tmp_174_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_174_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1143);
/* PipeTest.ttcn, line 1143 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_174_default_flag == ALT_MAYBE) {
tmp_174_default_flag = TTCN_Default::try_altsteps();
if (tmp_174_default_flag == ALT_YES || tmp_174_default_flag == ALT_BREAK) break;
else if (tmp_174_default_flag == ALT_REPEAT) goto tmp_174;
}
current_location.update_lineno(1136);
/* PipeTest.ttcn, line 1136 */
if (tmp_174_alt_flag_0 == ALT_NO && tmp_174_alt_flag_1 == ALT_NO && tmp_174_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1136 and 1146.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1148);
/* PipeTest.ttcn, line 1148 */
{
Map_Params tmp_175(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_175);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Injection_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__VehicleMessage__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1152, TTCN_Location::LOCATION_TESTCASE, "TC_VehicleMessage_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_VehicleMessage_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1155);
/* PipeTest.ttcn, line 1155 */
{
Map_Params tmp_176(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_176);
}
current_location.update_lineno(1156);
/* PipeTest.ttcn, line 1156 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_68)), NULL);
current_location.update_lineno(1158);
/* PipeTest.ttcn, line 1158 */
{
tmp_177:
alt_status tmp_177_alt_flag_0 = ALT_MAYBE;
alt_status tmp_177_alt_flag_1 = ALT_MAYBE;
alt_status tmp_177_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_177_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1160);
/* PipeTest.ttcn, line 1160 */
tmp_177_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_177_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1161);
/* PipeTest.ttcn, line 1161 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_177_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1164);
/* PipeTest.ttcn, line 1164 */
tmp_177_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_177_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1165);
/* PipeTest.ttcn, line 1165 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_177_default_flag == ALT_MAYBE) {
tmp_177_default_flag = TTCN_Default::try_altsteps();
if (tmp_177_default_flag == ALT_YES || tmp_177_default_flag == ALT_BREAK) break;
else if (tmp_177_default_flag == ALT_REPEAT) goto tmp_177;
}
current_location.update_lineno(1158);
/* PipeTest.ttcn, line 1158 */
if (tmp_177_alt_flag_0 == ALT_NO && tmp_177_alt_flag_1 == ALT_NO && tmp_177_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1158 and 1167.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1169);
/* PipeTest.ttcn, line 1169 */
{
Map_Params tmp_178(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_178);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_VehicleMessage_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__LogVerification__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1173, TTCN_Location::LOCATION_TESTCASE, "TC_LogVerification_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_LogVerification_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1176);
/* PipeTest.ttcn, line 1176 */
{
Map_Params tmp_179(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_179);
}
current_location.update_lineno(1177);
/* PipeTest.ttcn, line 1177 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_69)), NULL);
current_location.update_lineno(1179);
/* PipeTest.ttcn, line 1179 */
{
tmp_180:
alt_status tmp_180_alt_flag_0 = ALT_MAYBE;
alt_status tmp_180_alt_flag_1 = ALT_MAYBE;
alt_status tmp_180_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_180_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1181);
/* PipeTest.ttcn, line 1181 */
tmp_180_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_180_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1182);
/* PipeTest.ttcn, line 1182 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_180_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1185);
/* PipeTest.ttcn, line 1185 */
tmp_180_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_180_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1186);
/* PipeTest.ttcn, line 1186 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_180_default_flag == ALT_MAYBE) {
tmp_180_default_flag = TTCN_Default::try_altsteps();
if (tmp_180_default_flag == ALT_YES || tmp_180_default_flag == ALT_BREAK) break;
else if (tmp_180_default_flag == ALT_REPEAT) goto tmp_180;
}
current_location.update_lineno(1179);
/* PipeTest.ttcn, line 1179 */
if (tmp_180_alt_flag_0 == ALT_NO && tmp_180_alt_flag_1 == ALT_NO && tmp_180_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1179 and 1188.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1190);
/* PipeTest.ttcn, line 1190 */
{
Map_Params tmp_181(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_181);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_LogVerification_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__LogVerification__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1194, TTCN_Location::LOCATION_TESTCASE, "TC_LogVerification_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_LogVerification_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1197);
/* PipeTest.ttcn, line 1197 */
{
Map_Params tmp_182(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_182);
}
current_location.update_lineno(1198);
/* PipeTest.ttcn, line 1198 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_70)), NULL);
current_location.update_lineno(1200);
/* PipeTest.ttcn, line 1200 */
{
tmp_183:
alt_status tmp_183_alt_flag_0 = ALT_MAYBE;
alt_status tmp_183_alt_flag_1 = ALT_MAYBE;
alt_status tmp_183_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_183_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1202);
/* PipeTest.ttcn, line 1202 */
tmp_183_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_183_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1203);
/* PipeTest.ttcn, line 1203 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_183_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1206);
/* PipeTest.ttcn, line 1206 */
tmp_183_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_183_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1207);
/* PipeTest.ttcn, line 1207 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_183_default_flag == ALT_MAYBE) {
tmp_183_default_flag = TTCN_Default::try_altsteps();
if (tmp_183_default_flag == ALT_YES || tmp_183_default_flag == ALT_BREAK) break;
else if (tmp_183_default_flag == ALT_REPEAT) goto tmp_183;
}
current_location.update_lineno(1200);
/* PipeTest.ttcn, line 1200 */
if (tmp_183_alt_flag_0 == ALT_NO && tmp_183_alt_flag_1 == ALT_NO && tmp_183_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1200 and 1209.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1211);
/* PipeTest.ttcn, line 1211 */
{
Map_Params tmp_184(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_184);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_LogVerification_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Firewall__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1215, TTCN_Location::LOCATION_TESTCASE, "TC_Firewall_01");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Firewall_01", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1218);
/* PipeTest.ttcn, line 1218 */
{
Map_Params tmp_185(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_185);
}
current_location.update_lineno(1219);
/* PipeTest.ttcn, line 1219 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_71)), NULL);
current_location.update_lineno(1221);
/* PipeTest.ttcn, line 1221 */
{
tmp_186:
alt_status tmp_186_alt_flag_0 = ALT_MAYBE;
alt_status tmp_186_alt_flag_1 = ALT_MAYBE;
alt_status tmp_186_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_186_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1223);
/* PipeTest.ttcn, line 1223 */
tmp_186_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_186_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1224);
/* PipeTest.ttcn, line 1224 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_186_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1227);
/* PipeTest.ttcn, line 1227 */
tmp_186_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_186_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1228);
/* PipeTest.ttcn, line 1228 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_186_default_flag == ALT_MAYBE) {
tmp_186_default_flag = TTCN_Default::try_altsteps();
if (tmp_186_default_flag == ALT_YES || tmp_186_default_flag == ALT_BREAK) break;
else if (tmp_186_default_flag == ALT_REPEAT) goto tmp_186;
}
current_location.update_lineno(1221);
/* PipeTest.ttcn, line 1221 */
if (tmp_186_alt_flag_0 == ALT_NO && tmp_186_alt_flag_1 == ALT_NO && tmp_186_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1221 and 1230.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1232);
/* PipeTest.ttcn, line 1232 */
{
Map_Params tmp_187(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_187);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Firewall_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Firewall__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1236, TTCN_Location::LOCATION_TESTCASE, "TC_Firewall_02");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Firewall_02", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1239);
/* PipeTest.ttcn, line 1239 */
{
Map_Params tmp_188(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_188);
}
current_location.update_lineno(1240);
/* PipeTest.ttcn, line 1240 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_72)), NULL);
current_location.update_lineno(1242);
/* PipeTest.ttcn, line 1242 */
{
tmp_189:
alt_status tmp_189_alt_flag_0 = ALT_MAYBE;
alt_status tmp_189_alt_flag_1 = ALT_MAYBE;
alt_status tmp_189_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_189_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1244);
/* PipeTest.ttcn, line 1244 */
tmp_189_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_189_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1245);
/* PipeTest.ttcn, line 1245 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_189_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1248);
/* PipeTest.ttcn, line 1248 */
tmp_189_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_189_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1249);
/* PipeTest.ttcn, line 1249 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_189_default_flag == ALT_MAYBE) {
tmp_189_default_flag = TTCN_Default::try_altsteps();
if (tmp_189_default_flag == ALT_YES || tmp_189_default_flag == ALT_BREAK) break;
else if (tmp_189_default_flag == ALT_REPEAT) goto tmp_189;
}
current_location.update_lineno(1242);
/* PipeTest.ttcn, line 1242 */
if (tmp_189_alt_flag_0 == ALT_NO && tmp_189_alt_flag_1 == ALT_NO && tmp_189_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1242 and 1251.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1253);
/* PipeTest.ttcn, line 1253 */
{
Map_Params tmp_190(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_190);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Firewall_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__Firewall__03(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1257, TTCN_Location::LOCATION_TESTCASE, "TC_Firewall_03");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_Firewall_03", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1260);
/* PipeTest.ttcn, line 1260 */
{
Map_Params tmp_191(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_191);
}
current_location.update_lineno(1261);
/* PipeTest.ttcn, line 1261 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_73)), NULL);
current_location.update_lineno(1263);
/* PipeTest.ttcn, line 1263 */
{
tmp_192:
alt_status tmp_192_alt_flag_0 = ALT_MAYBE;
alt_status tmp_192_alt_flag_1 = ALT_MAYBE;
alt_status tmp_192_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_192_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1265);
/* PipeTest.ttcn, line 1265 */
tmp_192_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_192_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1266);
/* PipeTest.ttcn, line 1266 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_192_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1269);
/* PipeTest.ttcn, line 1269 */
tmp_192_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_192_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1270);
/* PipeTest.ttcn, line 1270 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_192_default_flag == ALT_MAYBE) {
tmp_192_default_flag = TTCN_Default::try_altsteps();
if (tmp_192_default_flag == ALT_YES || tmp_192_default_flag == ALT_BREAK) break;
else if (tmp_192_default_flag == ALT_REPEAT) goto tmp_192;
}
current_location.update_lineno(1263);
/* PipeTest.ttcn, line 1263 */
if (tmp_192_alt_flag_0 == ALT_NO && tmp_192_alt_flag_1 == ALT_NO && tmp_192_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1263 and 1272.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1274);
/* PipeTest.ttcn, line 1274 */
{
Map_Params tmp_193(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_193);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_Firewall_03 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__CAN__Injection(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("PipeTest.ttcn", 1278, TTCN_Location::LOCATION_TESTCASE, "TC_CAN_Injection");
try {
TTCN_Runtime::begin_testcase("PipeTest", "TC_CAN_Injection", "PipeTest", "PIPE_CT", "PipeTest", "PIPE_CT", has_timer, timer_value);
current_location.update_lineno(1281);
/* PipeTest.ttcn, line 1281 */
{
Map_Params tmp_194(0);
TTCN_Runtime::map_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_194);
}
current_location.update_lineno(1283);
/* PipeTest.ttcn, line 1283 */
TIMER t__guard("t_guard");
current_location.update_lineno(1308);
/* PipeTest.ttcn, line 1308 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_74), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1309);
/* PipeTest.ttcn, line 1309 */
{
tmp_195:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_195;
}
current_location.update_lineno(1309);
/* PipeTest.ttcn, line 1309 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1309.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1311);
/* PipeTest.ttcn, line 1311 */
sleep(3.0e1);
current_location.update_lineno(1313);
/* PipeTest.ttcn, line 1313 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1314);
/* PipeTest.ttcn, line 1314 */
t__guard.start(5.0);
current_location.update_lineno(1315);
/* PipeTest.ttcn, line 1315 */
{
tmp_196:
alt_status tmp_196_alt_flag_0 = ALT_MAYBE;
alt_status tmp_196_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_196_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1316);
/* PipeTest.ttcn, line 1316 */
tmp_196_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_196_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1317);
/* PipeTest.ttcn, line 1317 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_196_default_flag == ALT_MAYBE) {
tmp_196_default_flag = TTCN_Default::try_altsteps();
if (tmp_196_default_flag == ALT_YES || tmp_196_default_flag == ALT_BREAK) break;
else if (tmp_196_default_flag == ALT_REPEAT) goto tmp_196;
}
current_location.update_lineno(1315);
/* PipeTest.ttcn, line 1315 */
if (tmp_196_alt_flag_0 == ALT_NO && tmp_196_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1315 and 1319.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1320);
/* PipeTest.ttcn, line 1320 */
{
tmp_197:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_197;
}
current_location.update_lineno(1320);
/* PipeTest.ttcn, line 1320 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1320.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1322);
/* PipeTest.ttcn, line 1322 */
t__guard.start(5.0);
current_location.update_lineno(1323);
/* PipeTest.ttcn, line 1323 */
{
tmp_198:
alt_status tmp_198_alt_flag_0 = ALT_MAYBE;
alt_status tmp_198_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_198_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1324);
/* PipeTest.ttcn, line 1324 */
tmp_198_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_198_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1325);
/* PipeTest.ttcn, line 1325 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_198_default_flag == ALT_MAYBE) {
tmp_198_default_flag = TTCN_Default::try_altsteps();
if (tmp_198_default_flag == ALT_YES || tmp_198_default_flag == ALT_BREAK) break;
else if (tmp_198_default_flag == ALT_REPEAT) goto tmp_198;
}
current_location.update_lineno(1323);
/* PipeTest.ttcn, line 1323 */
if (tmp_198_alt_flag_0 == ALT_NO && tmp_198_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1323 and 1327.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1329);
/* PipeTest.ttcn, line 1329 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_75), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1330);
/* PipeTest.ttcn, line 1330 */
{
tmp_199:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_199;
}
current_location.update_lineno(1330);
/* PipeTest.ttcn, line 1330 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1330.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1332);
/* PipeTest.ttcn, line 1332 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1333);
/* PipeTest.ttcn, line 1333 */
t__guard.start(5.0);
current_location.update_lineno(1334);
/* PipeTest.ttcn, line 1334 */
{
tmp_200:
alt_status tmp_200_alt_flag_0 = ALT_MAYBE;
alt_status tmp_200_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_200_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1335);
/* PipeTest.ttcn, line 1335 */
tmp_200_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_200_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1336);
/* PipeTest.ttcn, line 1336 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_200_default_flag == ALT_MAYBE) {
tmp_200_default_flag = TTCN_Default::try_altsteps();
if (tmp_200_default_flag == ALT_YES || tmp_200_default_flag == ALT_BREAK) break;
else if (tmp_200_default_flag == ALT_REPEAT) goto tmp_200;
}
current_location.update_lineno(1334);
/* PipeTest.ttcn, line 1334 */
if (tmp_200_alt_flag_0 == ALT_NO && tmp_200_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1334 and 1338.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1339);
/* PipeTest.ttcn, line 1339 */
{
tmp_201:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_201;
}
current_location.update_lineno(1339);
/* PipeTest.ttcn, line 1339 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1339.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1374);
/* PipeTest.ttcn, line 1374 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_76), CHARSTRING_template(cs_7)), NULL);
current_location.update_lineno(1376);
/* PipeTest.ttcn, line 1376 */
t__guard.start(6.0e1);
current_location.update_lineno(1377);
/* PipeTest.ttcn, line 1377 */
{
tmp_202:
alt_status tmp_202_alt_flag_0 = ALT_MAYBE;
alt_status tmp_202_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_202_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1378);
/* PipeTest.ttcn, line 1378 */
tmp_202_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_202_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1379);
/* PipeTest.ttcn, line 1379 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_202_default_flag == ALT_MAYBE) {
tmp_202_default_flag = TTCN_Default::try_altsteps();
if (tmp_202_default_flag == ALT_YES || tmp_202_default_flag == ALT_BREAK) break;
else if (tmp_202_default_flag == ALT_REPEAT) goto tmp_202;
}
current_location.update_lineno(1377);
/* PipeTest.ttcn, line 1377 */
if (tmp_202_alt_flag_0 == ALT_NO && tmp_202_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1377 and 1381.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1383);
/* PipeTest.ttcn, line 1383 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1384);
/* PipeTest.ttcn, line 1384 */
t__guard.start(5.0);
current_location.update_lineno(1385);
/* PipeTest.ttcn, line 1385 */
{
tmp_203:
alt_status tmp_203_alt_flag_0 = ALT_MAYBE;
alt_status tmp_203_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_203_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1386);
/* PipeTest.ttcn, line 1386 */
tmp_203_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_203_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1387);
/* PipeTest.ttcn, line 1387 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_203_default_flag == ALT_MAYBE) {
tmp_203_default_flag = TTCN_Default::try_altsteps();
if (tmp_203_default_flag == ALT_YES || tmp_203_default_flag == ALT_BREAK) break;
else if (tmp_203_default_flag == ALT_REPEAT) goto tmp_203;
}
current_location.update_lineno(1385);
/* PipeTest.ttcn, line 1385 */
if (tmp_203_alt_flag_0 == ALT_NO && tmp_203_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1385 and 1389.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1390);
/* PipeTest.ttcn, line 1390 */
{
tmp_204:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_204;
}
current_location.update_lineno(1390);
/* PipeTest.ttcn, line 1390 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1390.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1394);
/* PipeTest.ttcn, line 1394 */
t__guard.start(5.0);
current_location.update_lineno(1395);
/* PipeTest.ttcn, line 1395 */
{
tmp_205:
alt_status tmp_205_alt_flag_0 = ALT_MAYBE;
alt_status tmp_205_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_205_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1396);
/* PipeTest.ttcn, line 1396 */
tmp_205_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_205_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1397);
/* PipeTest.ttcn, line 1397 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_205_default_flag == ALT_MAYBE) {
tmp_205_default_flag = TTCN_Default::try_altsteps();
if (tmp_205_default_flag == ALT_YES || tmp_205_default_flag == ALT_BREAK) break;
else if (tmp_205_default_flag == ALT_REPEAT) goto tmp_205;
}
current_location.update_lineno(1395);
/* PipeTest.ttcn, line 1395 */
if (tmp_205_alt_flag_0 == ALT_NO && tmp_205_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1395 and 1399.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1402);
/* PipeTest.ttcn, line 1402 */
sleep(3.0e1);
current_location.update_lineno(1404);
/* PipeTest.ttcn, line 1404 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_77)), NULL);
current_location.update_lineno(1405);
/* PipeTest.ttcn, line 1405 */
{
tmp_206:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(ANY_VALUE), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_206;
}
current_location.update_lineno(1405);
/* PipeTest.ttcn, line 1405 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1405.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1407);
/* PipeTest.ttcn, line 1407 */
t__guard.start(5.0);
current_location.update_lineno(1408);
/* PipeTest.ttcn, line 1408 */
{
tmp_207:
alt_status tmp_207_alt_flag_0 = ALT_MAYBE;
alt_status tmp_207_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_207_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1409);
/* PipeTest.ttcn, line 1409 */
tmp_207_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_207_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1410);
/* PipeTest.ttcn, line 1410 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_207_default_flag == ALT_MAYBE) {
tmp_207_default_flag = TTCN_Default::try_altsteps();
if (tmp_207_default_flag == ALT_YES || tmp_207_default_flag == ALT_BREAK) break;
else if (tmp_207_default_flag == ALT_REPEAT) goto tmp_207;
}
current_location.update_lineno(1408);
/* PipeTest.ttcn, line 1408 */
if (tmp_207_alt_flag_0 == ALT_NO && tmp_207_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1408 and 1412.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1414);
/* PipeTest.ttcn, line 1414 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PKill(INTEGER_template(9)), NULL);
current_location.update_lineno(1415);
/* PipeTest.ttcn, line 1415 */
t__guard.start(5.0);
current_location.update_lineno(1416);
/* PipeTest.ttcn, line 1416 */
{
tmp_208:
alt_status tmp_208_alt_flag_0 = ALT_MAYBE;
alt_status tmp_208_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_208_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1417);
/* PipeTest.ttcn, line 1417 */
tmp_208_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_208_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1418);
/* PipeTest.ttcn, line 1418 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_208_default_flag == ALT_MAYBE) {
tmp_208_default_flag = TTCN_Default::try_altsteps();
if (tmp_208_default_flag == ALT_YES || tmp_208_default_flag == ALT_BREAK) break;
else if (tmp_208_default_flag == ALT_REPEAT) goto tmp_208;
}
current_location.update_lineno(1416);
/* PipeTest.ttcn, line 1416 */
if (tmp_208_alt_flag_0 == ALT_NO && tmp_208_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1416 and 1420.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1421);
/* PipeTest.ttcn, line 1421 */
{
tmp_209:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PError(CHARSTRING_template(ANY_VALUE)), NULL, any_compref, NULL, NULL, NULL);
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_209;
}
current_location.update_lineno(1421);
/* PipeTest.ttcn, line 1421 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone receive statement failed in file PipeTest.ttcn, line 1421.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1424);
/* PipeTest.ttcn, line 1424 */
t__guard.start(5.0);
current_location.update_lineno(1425);
/* PipeTest.ttcn, line 1425 */
{
tmp_210:
alt_status tmp_210_alt_flag_0 = ALT_MAYBE;
alt_status tmp_210_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_210_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1426);
/* PipeTest.ttcn, line 1426 */
tmp_210_alt_flag_0 = t__guard.timeout(NULL);
if (tmp_210_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1427);
/* PipeTest.ttcn, line 1427 */
TTCN_Logger::log_str(TTCN_USER, "Timer expired, continue...");
break;
}
}
if (tmp_210_default_flag == ALT_MAYBE) {
tmp_210_default_flag = TTCN_Default::try_altsteps();
if (tmp_210_default_flag == ALT_YES || tmp_210_default_flag == ALT_BREAK) break;
else if (tmp_210_default_flag == ALT_REPEAT) goto tmp_210;
}
current_location.update_lineno(1425);
/* PipeTest.ttcn, line 1425 */
if (tmp_210_alt_flag_0 == ALT_NO && tmp_210_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1425 and 1429.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1431);
/* PipeTest.ttcn, line 1431 */
PIPE__CT_component_PIPE__PCO.send(PIPEasp__Templates::t__PExecute(CHARSTRING_template(cs_19), CHARSTRING_template(cs_78)), NULL);
current_location.update_lineno(1432);
/* PipeTest.ttcn, line 1432 */
{
tmp_211:
alt_status tmp_211_alt_flag_0 = ALT_MAYBE;
alt_status tmp_211_alt_flag_1 = ALT_MAYBE;
alt_status tmp_211_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_211_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1434);
/* PipeTest.ttcn, line 1434 */
tmp_211_alt_flag_0 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_32), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_211_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1435);
/* PipeTest.ttcn, line 1435 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_211_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1438);
/* PipeTest.ttcn, line 1438 */
tmp_211_alt_flag_1 = PIPE__CT_component_PIPE__PCO.receive(PIPEasp__Templates::t__PResult(CHARSTRING_template(cs_33), CHARSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE)), &(PIPE__CT_component_v__ASP__PResult), any_compref, NULL, NULL, NULL);
if (tmp_211_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1439);
/* PipeTest.ttcn, line 1439 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_211_default_flag == ALT_MAYBE) {
tmp_211_default_flag = TTCN_Default::try_altsteps();
if (tmp_211_default_flag == ALT_YES || tmp_211_default_flag == ALT_BREAK) break;
else if (tmp_211_default_flag == ALT_REPEAT) goto tmp_211;
}
current_location.update_lineno(1432);
/* PipeTest.ttcn, line 1432 */
if (tmp_211_alt_flag_0 == ALT_NO && tmp_211_alt_flag_1 == ALT_NO && tmp_211_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file PipeTest.ttcn between lines 1432 and 1442.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1444);
/* PipeTest.ttcn, line 1444 */
{
Map_Params tmp_212(0);
TTCN_Runtime::unmap_port(self, PIPE__CT_component_PIPE__PCO.get_name(), SYSTEM_COMPREF, PIPE__CT_component_PIPE__PCO.get_name(), tmp_212);
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_CAN_Injection was stopped.");
}
return TTCN_Runtime::end_testcase();
}

void module_control_part()
{
TTCN_Location current_location("PipeTest.ttcn", 1449, TTCN_Location::LOCATION_CONTROLPART, "PipeTest");
TTCN_Runtime::begin_controlpart("PipeTest");
TTCN_ControlPartEnder ender_("PipeTest");
current_location.update_lineno(1451);
/* PipeTest.ttcn, line 1451 */
testcase_TC__SW__Config__01(FALSE, 0.0);
current_location.update_lineno(1452);
/* PipeTest.ttcn, line 1452 */
testcase_TC__SW__Config__02(FALSE, 0.0);
current_location.update_lineno(1453);
/* PipeTest.ttcn, line 1453 */
testcase_TC__Authorization__01(FALSE, 0.0);
current_location.update_lineno(1454);
/* PipeTest.ttcn, line 1454 */
testcase_TC__Authorization__02(FALSE, 0.0);
current_location.update_lineno(1455);
/* PipeTest.ttcn, line 1455 */
testcase_TC__Package__01(FALSE, 0.0);
current_location.update_lineno(1456);
/* PipeTest.ttcn, line 1456 */
testcase_TC__Package__02(FALSE, 0.0);
current_location.update_lineno(1457);
/* PipeTest.ttcn, line 1457 */
testcase_TC__Package__03(FALSE, 0.0);
current_location.update_lineno(1458);
/* PipeTest.ttcn, line 1458 */
testcase_TC__Node__01(FALSE, 0.0);
current_location.update_lineno(1459);
/* PipeTest.ttcn, line 1459 */
testcase_TC__Node__02(FALSE, 0.0);
current_location.update_lineno(1460);
/* PipeTest.ttcn, line 1460 */
testcase_TC__individual__01(FALSE, 0.0);
current_location.update_lineno(1461);
/* PipeTest.ttcn, line 1461 */
testcase_TC__individual__02(FALSE, 0.0);
current_location.update_lineno(1462);
/* PipeTest.ttcn, line 1462 */
testcase_TC__Network__01(FALSE, 0.0);
current_location.update_lineno(1463);
/* PipeTest.ttcn, line 1463 */
testcase_TC__Network__02(FALSE, 0.0);
current_location.update_lineno(1464);
/* PipeTest.ttcn, line 1464 */
testcase_TC__Injection__01(FALSE, 0.0);
current_location.update_lineno(1465);
/* PipeTest.ttcn, line 1465 */
testcase_TC__VehicleMessage__01(FALSE, 0.0);
current_location.update_lineno(1466);
/* PipeTest.ttcn, line 1466 */
testcase_TC__LogVerification__01(FALSE, 0.0);
current_location.update_lineno(1467);
/* PipeTest.ttcn, line 1467 */
testcase_TC__LogVerification__02(FALSE, 0.0);
current_location.update_lineno(1468);
/* PipeTest.ttcn, line 1468 */
testcase_TC__Firewall__01(FALSE, 0.0);
current_location.update_lineno(1469);
/* PipeTest.ttcn, line 1469 */
testcase_TC__Firewall__02(FALSE, 0.0);
current_location.update_lineno(1470);
/* PipeTest.ttcn, line 1470 */
testcase_TC__Firewall__03(FALSE, 0.0);
current_location.update_lineno(1471);
/* PipeTest.ttcn, line 1471 */
testcase_TC__CAN__Injection(FALSE, 0.0);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("PipeTest.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "PipeTest");
PIPEasp__PortType::module_object.pre_init_module();
PIPEasp__Templates::module_object.pre_init_module();
module_object.add_altstep("handle_default", (genericfunc_t)&handle__default_instance, (genericfunc_t )&activate_handle__default, (genericfunc_t )&handle__default);
module_object.add_testcase_nonpard("TC_basic", testcase_TC__basic);
module_object.add_testcase_nonpard("TC_executeSomeUnixCommands", testcase_TC__executeSomeUnixCommands);
module_object.add_function("WindowNotice", (genericfunc_t)&WindowNotice, (genericfunc_t)&start_WindowNotice);
module_object.add_function("WindowQuestionString", (genericfunc_t)&WindowQuestionString, (genericfunc_t)&start_WindowQuestionString);
module_object.add_function("WindowQuestionYesNo", (genericfunc_t)&WindowQuestionYesNo, (genericfunc_t)&start_WindowQuestionYesNo);
module_object.add_testcase_nonpard("TC_TrySomeWindows", testcase_TC__TrySomeWindows);
module_object.add_testcase_nonpard("TC_simple", testcase_TC__simple);
module_object.add_testcase_nonpard("TC_unmap", testcase_TC__unmap);
module_object.add_function("sleep", (genericfunc_t)&sleep, NULL);
module_object.add_testcase_nonpard("TC_SW_Config_01", testcase_TC__SW__Config__01);
module_object.add_testcase_nonpard("TC_SW_Config_02", testcase_TC__SW__Config__02);
module_object.add_testcase_nonpard("TC_Authorization_01", testcase_TC__Authorization__01);
module_object.add_testcase_nonpard("TC_Authorization_02", testcase_TC__Authorization__02);
module_object.add_testcase_nonpard("TC_Package_01", testcase_TC__Package__01);
module_object.add_testcase_nonpard("TC_Package_02", testcase_TC__Package__02);
module_object.add_testcase_nonpard("TC_Package_03", testcase_TC__Package__03);
module_object.add_testcase_nonpard("TC_Node_01", testcase_TC__Node__01);
module_object.add_testcase_nonpard("TC_Node_02", testcase_TC__Node__02);
module_object.add_testcase_nonpard("TC_individual_01", testcase_TC__individual__01);
module_object.add_testcase_nonpard("TC_individual_02", testcase_TC__individual__02);
module_object.add_testcase_nonpard("TC_Network_01", testcase_TC__Network__01);
module_object.add_testcase_nonpard("TC_Network_02", testcase_TC__Network__02);
module_object.add_testcase_nonpard("TC_Injection_01", testcase_TC__Injection__01);
module_object.add_testcase_nonpard("TC_VehicleMessage_01", testcase_TC__VehicleMessage__01);
module_object.add_testcase_nonpard("TC_LogVerification_01", testcase_TC__LogVerification__01);
module_object.add_testcase_nonpard("TC_LogVerification_02", testcase_TC__LogVerification__02);
module_object.add_testcase_nonpard("TC_Firewall_01", testcase_TC__Firewall__01);
module_object.add_testcase_nonpard("TC_Firewall_02", testcase_TC__Firewall__02);
module_object.add_testcase_nonpard("TC_Firewall_03", testcase_TC__Firewall__03);
module_object.add_testcase_nonpard("TC_CAN_Injection", testcase_TC__CAN__Injection);
}

static void post_init_module()
{
TTCN_Location current_location("PipeTest.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "PipeTest");
PIPEasp__PortType::module_object.post_init_module();
PIPEasp__Templates::module_object.post_init_module();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "PIPE_CT")) {
PIPE__CT_component_PIPE__PCO.activate_port();
PIPE__CT_component_PIPE__PCO1.activate_port();
PIPE__CT_component_v__ASP__PExecute.clean_up();
PIPE__CT_component_v__ASP__PResult.clean_up();
PIPE__CT_component_v__ASP__PExecuteBinary.clean_up();
PIPE__CT_component_v__ASP__PResultBinary.clean_up();
PIPE__CT_component_v__ASP__PExecuteBackground.clean_up();
PIPE__CT_component_v__ASP__PStdin.clean_up();
PIPE__CT_component_v__ASP__PStdout.clean_up();
PIPE__CT_component_v__ASP__PStderr.clean_up();
PIPE__CT_component_v__ASP__PStdinBinary.clean_up();
PIPE__CT_component_v__ASP__PStdoutBinary.clean_up();
PIPE__CT_component_v__ASP__PStderrBinary.clean_up();
PIPE__CT_component_v__ASP__PKill.clean_up();
PIPE__CT_component_v__ASP__PExit.clean_up();
PIPE__CT_component_v__ASP__PLineMode.clean_up();
PIPE__CT_component_v__ASP__PError.clean_up();
return TRUE;
} else return FALSE;
}

static boolean init_system_port(const char* component_type, const char* port_name)
{
if (!strcmp(component_type, "PIPE_CT")) {
if (!strcmp(port_name, "PIPE_PCO")) {
PIPE__CT_component_PIPE__PCO.safe_start();
return TRUE;
}
if (!strcmp(port_name, "PIPE_PCO1")) {
PIPE__CT_component_PIPE__PCO1.safe_start();
return TRUE;
}
}
return FALSE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "WindowNotice")) {
CHARSTRING pl__notice;
pl__notice.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function WindowNotice(");
pl__notice.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
WindowNotice(pl__notice);
TTCN_Runtime::function_finished("WindowNotice");
return TRUE;
} else if (!strcmp(function_name, "WindowQuestionString")) {
CHARSTRING pl__question;
CHARSTRING  pl__answer;
pl__question.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function WindowQuestionString(");
pl__question.log();
TTCN_Logger::log_event_str(", ");
pl__answer.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
WindowQuestionString(pl__question, pl__answer);
TTCN_Runtime::function_finished("WindowQuestionString");
return TRUE;
} else if (!strcmp(function_name, "WindowQuestionYesNo")) {
CHARSTRING pl__question;
BOOLEAN  pl__answer;
pl__question.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function WindowQuestionYesNo(");
pl__question.log();
TTCN_Logger::log_event_str(", ");
pl__answer.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
WindowQuestionYesNo(pl__question, pl__answer);
TTCN_Runtime::function_finished("WindowQuestionYesNo");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
